{"version":3,"file":"component---src-templates-post-template-tsx-content-file-path-d-projects-blog-posts-000-start-raspberrypi-without-screen-index-mdx-ec9ae8086c51c339fed4.js","mappings":"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","sources":["webpack://blog/./posts/000-start-raspberrypi-without-screen/index.mdx","webpack://blog/./src/templates/post-template.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"最近倒腾东西，翻出了几年前入手的一个 raspberry pi 2 代 b+ 的板子，上面都蒙了一层灰，开机后发现还能用。发挥环保主义的精神，废物再利用起来。但是现在遇到的问题是：一、手边上没有显示器，二、网上经常检索到的另一种方法是通过网线直连，共享 pc 的网络给树莓派，然后再通过 ssh 登录树莓派，这种方法的问题在于我一台 mac，一台 surface 都没有网线的端口，又不想专门为这个再买一个适配器。\"), \"\\n\", React.createElement(_components.p, null, \"那就完全没有方法了吗？当然不是的。\"), \"\\n\", React.createElement(_components.h2, null, \"环境\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"2 代树莓派（3 代树莓派和 Pi Zero W 应该都是可以的）\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"USB Wi-Fi 适配器 (如果是 3 代的话，内置 Wi-Fi 支持，这个不是必须的)\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"8GB SD 卡\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"电源\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"个人 Wi-Fi\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"安装镜像\"), \"\\n\", React.createElement(_components.p, null, \"在树莓派的\", React.createElement(_components.a, {\n    href: \"https://www.raspberrypi.org/downloads/\"\n  }, \"官网\"), \"上下载最新的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Raspbian Jessie</code>\"\n    }\n  }), \" 的镜像或者 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Raspbian Stretch</code>\"\n    }\n  }), \" 的镜像。我这里下使用的是最新的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">2018-06-07-raspbian-stretch.img</code>\"\n    }\n  }), \"。如果后面只想在终端中使用的话，完全可以下载对应的 lite 版本。\"), \"\\n\", React.createElement(_components.p, null, \"镜像下载好了之后，写到你的 SD 卡里面就可以了。Windows 下可以使用比较经典的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Win32DiskImager</code>\"\n    }\n  }), \"，Mac 下推荐开源的 \", React.createElement(_components.a, {\n    href: \"https://github.com/resin-io/etcher\"\n  }, \"Etcher\"), \"，或者直接使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">diskutil</code>\"\n    }\n  }), \" 也是可以的，相关使用这里不再赘述。\"), \"\\n\", React.createElement(_components.h2, null, \"配置 Wi-Fi 和 SSH\"), \"\\n\", React.createElement(_components.p, null, \"镜像写入之后会挂载一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">boot</code>\"\n    }\n  }), \" 的卷。Windows 下可以直接通过资源管理工具打开。Mac 下建议使用命令行。\"), \"\\n\", React.createElement(_components.h3, null, \"启用 SSH\"), \"\\n\", React.createElement(_components.p, null, \"树莓派默认情况下是没有打开 SSH 连接的，在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">boot</code>\"\n    }\n  }), \" 卷的根路径下新建一个名叫 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ssh</code>\"\n    }\n  }), \" 的空文件，树莓派启动的时候就会开启 SSH 的功能。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">touch</span> <span class=\\\"token function\\\">ssh</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"Wi-Fi 连接设置\"), \"\\n\", React.createElement(_components.p, null, \"在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">boot</code>\"\n    }\n  }), \" 卷的根路径下新建一个名叫 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">wpa_supplicant.conf</code>\"\n    }\n  }), \"的文件。树莓派启动之后，发现 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">boot</code>\"\n    }\n  }), \" 下面有这个文件的话，会把这个文件拷贝到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/wpa_supplicant/</code>\"\n    }\n  }), \" 路径下面，这就是我们树莓派的 Wi-Fi 连接的配置文件。\"), \"\\n\", React.createElement(_components.p, null, \"下面来看一下这个文件应该怎么写。\"), \"\\n\", React.createElement(_components.p, null, \"如果你的系统是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Raspbian Jessie</code>\"\n    }\n  }), \" 的话，填入以下配置\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token assign-left variable\\\">network</span><span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token assign-left variable\\\">ssid</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"你的Wi-Fi名称\\\"</span>\\r\\n    <span class=\\\"token assign-left variable\\\">psk</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"Wi-Fi密码\\\"</span>\\r\\n    <span class=\\\"token assign-left variable\\\">key_mgmt</span><span class=\\\"token operator\\\">=</span>WPA-PSK\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"如果是系统是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Raspbian Stretch</code>\"\n    }\n  }), \" 的话，配置如下\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token assign-left variable\\\">ctrl_interface</span><span class=\\\"token operator\\\">=</span>DIR<span class=\\\"token operator\\\">=</span>/var/run/wpa_supplicant <span class=\\\"token assign-left variable\\\">GROUP</span><span class=\\\"token operator\\\">=</span>netdev\\r\\n<span class=\\\"token assign-left variable\\\">network</span><span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token assign-left variable\\\">ssid</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"你的Wi-Fi名称\\\"</span>\\r\\n    <span class=\\\"token assign-left variable\\\">psk</span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"Wi-Fi密码\\\"</span>\\r\\n    <span class=\\\"token assign-left variable\\\">key_mgmt</span><span class=\\\"token operator\\\">=</span>WPA-PSK\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"多了一行 ctrl_interface 的配置，但是目前我还不太清楚这个到底是什么含义。有知道的朋友可以在评论区指出。\"), \"\\n\", React.createElement(_components.p, null, \"注意：这里填写的 Wi-Fi 应该和 PC 当前连接的 Wi-Fi 保持一致。\"), \"\\n\", React.createElement(_components.h3, null, \"发现 IP\"), \"\\n\", React.createElement(_components.p, null, \"到这里我们距离连接上树莓派就之差一步之遥了，通过 SSH 的方式登录树莓派还需要知道树莓派在局域网中的 IP 地址。\"), \"\\n\", React.createElement(_components.p, null, \"我们把 SD 卡插到树莓派上，然后通电。这时候红色指示灯亮起，表示说已通电。绿色指示灯闪烁，表示树莓派在往 SD 卡读写数据。等绿灯闪烁一段时间基本不闪之后，就说明我们的树莓派已经开机成功。\"), \"\\n\", React.createElement(_components.p, null, \"这时候，如果我们的 PC 是 Windows，一个简单的方法就是在 powershell 输入 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">arp -a</code>\"\n    }\n  }), \"，其中，返回的列表后面类型对应是动态类型的，就是我们接入的设备。\"), \"\\n\", React.createElement(_components.p, null, \"分别在树莓派开机和关机的状态下执行，多出来的那个动态连接地址就是树莓派的 IP 地址。\"), \"\\n\", React.createElement(_components.p, null, \"如果喜欢图形化界面的话，Windows 下可以使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Advanced Ip Scanner</code>\"\n    }\n  }), \"，Mac 下有 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LanScan</code>\"\n    }\n  }), \", 可以直接从 hostname 辨别出 raspberry pi。\"), \"\\n\", React.createElement(_components.h3, null, \"SSH 登录\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">ssh</span> pi@ip_address_of_your_raspberry_pi</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"然后用默认密码 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">raspberry</code>\"\n    }\n  }), \" 就可以登录设备了。\"), \"\\n\", React.createElement(_components.h2, null, \"使用串口连接树莓派\"), \"\\n\", React.createElement(_components.p, null, \"树莓派作为一款功能强大的开源硬件，肯定是支持串口通信的。但是也有两个问题，第一，树莓派本身并没有默认开启串口通信功能，第二，很多开发者如果本身不是做硬件的，可能不会有 USB 转 TTL 的连接线。我这里是刚好有一根上古遗留下来的（如果没有，但是对这种方式敢兴趣，也可以直接在万能的淘宝上淘一根，10 块钱左右）\"), \"\\n\", React.createElement(_components.h3, null, \"USB 转 TTL 线说明\"), \"\\n\", React.createElement(_components.p, null, \"一端是 USB 接口，另一端 4 根出线，颜色不同。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"红色，电源供电，一般是 3V 或者 5V，如果要用它给树莓派供电的话，树莓派的工作电压是 5V\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"黑色，接地\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"白色，信号输入\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"绿色，信号输出\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"开启 UART\"), \"\\n\", React.createElement(_components.p, null, \"分两种情况：\"), \"\\n\", React.createElement(_components.p, null, \"一、通过上面的方法或者其他方式，已经能连接使用树莓派了。这种情况下，直接在树莓派对终端中输入\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ <span class=\\\"token function\\\">sudo</span> raspi-config</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在弹出对对话框中选择 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Interfacing Options</code>\"\n    }\n  }), \"，进入下一个对话框，然后选择 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Serial</code>\"\n    }\n  }), \"，最后选择 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">YES</code>\"\n    }\n  }), \"，回到命令行后重启树莓派就可以了。\"), \"\\n\", React.createElement(_components.p, null, \"二、回到我的使用场景，按上面的步骤安装好了镜像，但是还没有启动系统。\"), \"\\n\", React.createElement(_components.p, null, \"这种时候的一个解决方案是，在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">boot</code>\"\n    }\n  }), \" 卷的根路径下找到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cmdline.text</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">config.text</code>\"\n    }\n  }), \" 两个文件。首先打开 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cmdline.text</code>\"\n    }\n  }), \"，检查文件里面是不是有 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">console=serial0,115200</code>\"\n    }\n  }), \" 的这个配置，115200 是树莓派的波特率，一般都是已经有的，如果没有，行尾加上这个配置。接下来打开 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">config.text</code>\"\n    }\n  }), \" 这个文件，在新行追加 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">enable_uart=1</code>\"\n    }\n  }), \"，0 - 关闭，1 - 开启。\"), \"\\n\", React.createElement(_components.p, null, \"然后把 SD 卡插入树莓派，开机。接下来就可以开始连接我们的树莓派了。\"), \"\\n\", React.createElement(_components.h3, null, \"UART 连接\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://pinout.xyz/\"\n  }, \"https://pinout.xyz/\"), \" 这是一个很有用的网站，上面列出了树莓派的 GPIO 各个管脚的作用，点击管脚我们可以查看相应的说明，对我们做 GPIO 相关的开发很用帮助。\"), \"\\n\", React.createElement(_components.p, null, \"这里先打开这个网站，找到标注为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">RXD</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TXD</code>\"\n    }\n  }), \" 的这两个管脚的位置。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TXD</code>\"\n    }\n  }), \" 是树莓派 UART 的输出，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">RXD</code>\"\n    }\n  }), \" 是树莓派的输入。\"), \"\\n\", React.createElement(_components.p, null, \"然后把 USB 转 TTL 线的黑色线接树莓派的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Ground</code>\"\n    }\n  }), \"，白色接 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TXD</code>\"\n    }\n  }), \"，绿色接 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">RXD</code>\"\n    }\n  }), \"，如果已经有电源供电，红线可以不接。\"), \"\\n\", React.createElement(_components.p, null, \"连接好了之后，如果我们在 Windows 环境下，可以使用 putty。打开 putty，选择串口通信，Serial line 输入 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">COM3</code>\"\n    }\n  }), \"，Speed 输入 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">115200</code>\"\n    }\n  }), \"，即树莓派的波特率。进去之后，我们看到一个小黑窗，这时候，键盘输入回车，树莓派就会让我们输入用户名以及密码，输入正确之后我们就可以为所欲为了。\"), \"\\n\", React.createElement(_components.p, null, \"如果是在 Mac 环境下的话，我们把 USB 插入 Mac 之后，我们的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/dev</code>\"\n    }\n  }), \" 路径下就会多出一个设备，假如叫做 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cu.usbserial</code>\"\n    }\n  }), \"，这时候我们可以借助两个命令行工具。一个是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">minicom</code>\"\n    }\n  }), \"，另一个是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">screen</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ brew <span class=\\\"token function\\\">install</span> minicom\\r\\n\\r\\n<span class=\\\"token comment\\\"># or</span>\\r\\n\\r\\n$ brew <span class=\\\"token function\\\">install</span> <span class=\\\"token function\\\">screen</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"安装好之后，如下，使用相应的命令行\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">$ minicom <span class=\\\"token parameter variable\\\">-o</span> <span class=\\\"token parameter variable\\\">-D</span> /dev/cu.usbserial <span class=\\\"token parameter variable\\\">-b</span> <span class=\\\"token number\\\">115200</span>\\r\\n\\r\\n<span class=\\\"token comment\\\"># or</span>\\r\\n\\r\\n$ <span class=\\\"token function\\\">screen</span> /dev/cu.usbserial <span class=\\\"token number\\\">115200</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"再和 Windows 一样，输入用户名密码就可以连接使用了。\"), \"\\n\", React.createElement(_components.p, null, \"以上。\"), \"\\n\", React.createElement(_components.h2, null, \"Reference\"), \"\\n\", React.createElement(_components.p, null, \"1、 \", React.createElement(_components.a, {\n    href: \"https://styxit.com/2017/03/14/headless-raspberry-setup.html\"\n  }, \"Headless Raspberry Pi setup with wifi\")), \"\\n\", React.createElement(_components.p, null, \"2、 \", React.createElement(_components.a, {\n    href: \"https://www.thepolyglotdeveloper.com/2017/02/connect-raspberry-pi-pi-zero-usb-ttl-serial-cable/\"\n  }, \"Connect To A Raspberry Pi And Pi Zero With A USB To TTL Serial Cable\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"D:/projects/blog/posts/000-start-raspberrypi-without-screen/index.mdx\";\nimport _kebabCase from \"lodash/kebabCase\";\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport Layout from \"../components/Layout\";\nimport {Meta} from \"../components/Meta\";\nimport {TagIcon} from \"../components/TagIcon\";\ndayjs.extend(localizedFormat);\nconst PostTemplate = _ref => {\n  var _mdx$frontmatter;\n  let {data: {mdx}, children} = _ref;\n  if (mdx === null) {\n    return null;\n  }\n  return React.createElement(Layout, null, React.createElement(\"div\", {\n    className: \"max-w-5xl mx-auto\"\n  }, React.createElement(Meta, {\n    title: mdx.frontmatter.title || \"\",\n    description: mdx.frontmatter.excerpt || \"\",\n    type: \"article\",\n    extras: [{\n      name: \"keywords\",\n      content: mdx.frontmatter.keywords.join(\",\")\n    }]\n  }), React.createElement(\"div\", {\n    className: \"prose xl:prose-xl dark:prose-dark dark:xl:prose-dark-xl max-w-none\"\n  }, React.createElement(\"h1\", {\n    className: \"mb-0 xl:mb-2\"\n  }, (_mdx$frontmatter = mdx.frontmatter) === null || _mdx$frontmatter === void 0 ? void 0 : _mdx$frontmatter.title), React.createElement(\"ul\", {\n    className: \"list-none flex flex-wrap p-0 xl:p-0 my-0 xl:my-0\"\n  }, mdx.frontmatter.tags.map(tag => React.createElement(\"li\", {\n    key: tag,\n    className: \"flex-none ml-0 mr-4\"\n  }, React.createElement(Link, {\n    to: \"/tags/\" + _kebabCase(tag || \"\")\n  }, React.createElement(\"div\", {\n    className: \"flex flex-row items-center\"\n  }, React.createElement(TagIcon, null), React.createElement(\"span\", {\n    className: \"ml-1\"\n  }, tag)))))), React.createElement(\"div\", {\n    className: \"text-gray-400 dark:text-gray-700 italic mb-12\"\n  }, dayjs(mdx.frontmatter.date).format(\"LL\")), children)));\n};\nconst pageQuery = \"1935398499\";\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","ul","li","a","span","h3","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","dayjs","localizedFormat","PostTemplate","_ref","_mdx$frontmatter","data","mdx","children","Layout","className","Meta","title","frontmatter","description","excerpt","type","extras","name","content","keywords","join","tags","map","tag","key","Link","to","_kebabCase","TagIcon","date","format","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}