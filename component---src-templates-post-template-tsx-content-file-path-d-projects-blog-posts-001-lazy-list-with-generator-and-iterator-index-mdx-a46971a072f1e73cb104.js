"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[26],{5058:function(n,a,s){s.r(a),s.d(a,{default:function(){return f}});var t=s(1151),p=s(7294);function e(n){const a=Object.assign({h2:"h2",p:"p",span:"span",a:"a",h3:"h3"},(0,t.ah)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.h2,null,"初识 Lazy List"),"\n",p.createElement(a.p,null,"如果有了解过 Haskell 的朋友，对下面的这些表达一定不陌生"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="haskell"><pre class="language-haskell"><code class="language-haskell"><span class="token builtin">repeat</span> <span class="token number">1</span> <span class="token comment">-- => [1, 1, 1, 1, 1,...]</span>\r\n<span class="token builtin">cycle</span> <span class="token string">"abc"</span> <span class="token comment">-- => "abcabcabc..."</span>\r\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">..</span><span class="token punctuation">]</span> <span class="token comment">-- => [1, 3, 5, 7, ...]</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"上面的几个表达式产生的都是无限列表。对于习惯了主流编程语言的朋友可能感到困惑，在有限的内存里面如何能表达无限的概念。主要的原因就是 Haskell 是一门默认采用惰性求值策略的语言，没有用到的部分，在内存里面只是一个表达式，并不会真正的去做计算。"),"\n",p.createElement(a.p,null,"如果只看上面的几个表达式，很多朋友可能会说，也没感觉到有什么神奇的地方，似乎并没有什么作用。我们再看看下面的代码。"),"\n",p.createElement(a.p,null,"Haskell 中的 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fibonacci</code>'}})," 数列："),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="haskell"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">fibonacci</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token builtin">zipWith</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token hvariable">fibonacci</span> <span class="token punctuation">(</span><span class="token builtin">tail</span> <span class="token hvariable">fibonacci</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"这里 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fibonacci</code>'}})," 本身是一个惰性结构，所以在计算的时候，会先算出列表前面的两个 1，得到 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">1 : 1...</code>'}})," 这样的结构，然后怎么表达 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fibonacci</code>'}})," 的 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fib(n) = fib(n - 1) + fib(n - 2)</code>'}})," 特性呢？我们可以注意到，",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n - 1</code>'}}),"和 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n - 2</code>'}})," 刚好在数列中相差一位，所以 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}})," 可以看作是该数列错位的相加的结果。"),"\n",p.createElement(a.p,null,"我们再来看一则",p.createElement(a.a,{href:"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"},"筛法求素数"),"。不熟悉筛法的可以先点开 wiki 去看一下该算法的思路。下面这段代码是 Haskell 的一个简单实现。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="haskell"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">primes</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token builtin">filter</span> <span class="token hvariable">isPrime</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">..</span><span class="token punctuation">]</span>\r\n  <span class="token keyword">where</span>\r\n    <span class="token hvariable">isPrime</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token builtin">all</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token hvariable">p</span> <span class="token operator">-></span> <span class="token hvariable">x</span> <span class="token operator">`mod`</span> <span class="token hvariable">p</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">takeWhile</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token hvariable">p</span> <span class="token operator">-></span> <span class="token hvariable">p</span> <span class="token operator">*</span> <span class="token hvariable">p</span> <span class="token operator">&lt;=</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token hvariable">primes</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",p.createElement(a.h2,null,"So, Why Lazy?"),"\n",p.createElement(a.p,null,"在某些不定长度的列表操作上，惰性列表会让代码和结构更灵活。用上面的 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">primes</code>'}})," 列表举个例子好了，在传统的 C 语言或者 Java 的实现里面，我们一般要先声明一个最大长度或者一个最大的取值范围，比如 10000 以内的素数。如果后面的计算要用到超过这个范围，我们就不得不重新调用生成函数，重新生成一份更长的列表。这里面的问题是：一、要主动去调用这个工厂函数，二、如果要复用已经计算出来的数据，手动去维护一个 cache 列表，势必增加代码的复杂度。另外一个可能的情况是，我们预先生成了一份很长的列表，后面的计算中只用到了列表头部的一丢丢数据，这也是极大的浪费。"),"\n",p.createElement(a.p,null,"惰性列表的使用增加了我们编程的表达能力，让我们可以更关注数据结构本身的特性，而不是浪费时间在如何去管理堆栈上面。因为，惰性求值特性保证我们在需要一个值的时候才会去计算，所以可以自动地最小化我们的计算量，节约资源。"),"\n",p.createElement(a.p,null,"比如我们可以通过 lazy byteString 去读、写文件，它本身不会把整个文件加载到我们的内存里面，而是按需的读取。有的时候我们读一个大文件，可能只筛选出需要的前几十条数据，却确不得不把几百 M 甚至上 G 的大文件整个的放到内存里面。"),"\n",p.createElement(a.p,null,"这里也找到一篇 14 年的文章 ",p.createElement(a.a,{href:"http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/"},"How to Speed Up Lo-Dash ×100? Introducing Lazy Evaluation"),"，感兴趣的可以点开看看。"),"\n",p.createElement(a.h2,null,"在 JavaScript 中实现 Lazy List"),"\n",p.createElement(a.p,null,"在 JavaScript 有没有惰性结构呢？先看下面这个例子。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">let</span> fetchSomething <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/some/thing\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  fetchSomething <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/some/thing/condition\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\nfetchSomething<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n  <span class="token comment">// TODO</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fetch</code>'}})," 方法本身是立即执行的，如果满足条件，这里的 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fetch</code>'}})," 方法会执行两次。这并不是我们期待的行为，这里需要让这个 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fetch</code>'}})," 的动作在我们需要的时候才去执行，而不是声明的时候就开始执行的话，通常的做法是把它改成下面的样子。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">fetchSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/some/thing\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  fetchSomething <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/some/thing/condition\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\nfetchSomething<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n  <span class="token comment">// TODO</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"由此启发，我们大致可以实现如下的结构。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">List<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  head<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span>\r\n  tail<span class="token operator">:</span> List<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> List<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>\r\n\r\n  <span class="token function">constructor</span><span class="token punctuation">(</span>head<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token function-variable function">tail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> List<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">head</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> head<span class="token punctuation">;</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> tail<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">List&lt;T></code>'}})," 本质上是一个单链表，构造函数里面传入的 tail 是一个工厂函数，用来构建新的 List 节点。只有在我们访问到一个节点的时候，才对它的 head 求值，访问它的下一个节点的时候对 tail 求值，不然 head 和 tail 都只是待求值的表达式。"),"\n",p.createElement(a.p,null,"这种方式看起来似乎已经解决了我的问题，但是这种结构在和普通的 Array 做互相转换的时候，存在大量不必要的额外开销。"),"\n",p.createElement(a.p,null,"那 JavaScript 中有没有更天然的结构，可以让我们免于去构造这样一个复杂的对象，简化代码的同时，让我们的代码更具有普适性呢？"),"\n",p.createElement(a.h3,null,"初识 Iterable"),"\n",p.createElement(a.p,null,"ES6 的新特性给了我想要的答案，",p.createElement(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"},"Iteration Protocols"),"。如果嫌 MDN 的描述太长，可以直接看下面等价的类型声明。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">interface</span> <span class="token class-name">Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">interface</span> <span class="token class-name">IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  done<span class="token operator">:</span> Boolean<span class="token punctuation">;</span>\r\n  value<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">interface</span> <span class="token class-name">IterableIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"所有实现一个 Iterable 接口的对象都可以通过诸如 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for...of...</code>'}}),"、",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">...itor</code>'}})," 以及 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Array.from</code>'}})," 来访问，当 next 方法的返回值中 done 为 true 时，迭代结束。而且只有我们访问 next 方法时，才会进入下一步迭代，是理想的 Lazy 结构。"),"\n",p.createElement(a.p,null,"这时候我们看一下我们的 fibonacci 该怎么写？"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Fibonacci</span> <span class="token keyword">implements</span> <span class="token class-name">IterableIterator<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">private</span> prev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">private</span> next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">public</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prev<span class="token punctuation">;</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prev<span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\r\n      done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\r\n      value<span class="token operator">:</span> current\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">const</span> fib <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nfib<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => { done: false, value: 1 }</span>\r\nfib<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => { done: false, value: 1 }</span>\r\nfib<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => { done: false, value: 2 }</span>\r\n<span class="token comment">// etc</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"到这里，我们已经可以表达一个惰性的无限数列了。但是上面的代码毕竟过于繁琐，好在 ES6 同时给我们提供了 Generator, 可以让我们很方便地书写 IterableItorator，从某种意义上来讲，Generator 可以说是上面代码的语法糖。"),"\n",p.createElement(a.p,null,"使用 Generator，上面的代码可以简化成下面的样子。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> prev<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> temp <span class="token operator">=</span> prev<span class="token punctuation">;</span>\r\n    prev <span class="token operator">=</span> next<span class="token punctuation">;</span>\r\n    next <span class="token operator">=</span> temp <span class="token operator">+</span> prev<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">const</span> fib <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token comment">// etc</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"这里不再去花段落介绍 Generator 的语法，不了解的同学可以先去阅读下这篇文章 ",p.createElement(a.a,{href:"https://medium.com/dailyjs/a-simple-guide-to-understanding-javascript-es6-generators-d1c350551950"},"A Simple Guide to Understanding Javascript (ES6) Generators"),"。"),"\n",p.createElement(a.h3,null,"定义 Infinite List"),"\n",p.createElement(a.p,null,"接着上面的代码往下写，下面的代码分别实现了文章开头的 repeat, cycle, iterate, range 等方法。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">repeat</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> item<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">cycle</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token operator">...</span>items<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">iterate</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">,</span> initial<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> val <span class="token operator">=</span> initial<span class="token punctuation">;</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> val<span class="token punctuation">;</span>\r\n    val <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> start<span class="token punctuation">;</span>\r\n    start <span class="token operator">+=</span> step<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"可以看到，代码是非常直观且易于理解的。"),"\n",p.createElement(a.h3,null,"定义 Operator"),"\n",p.createElement(a.p,null,"有了列表之后，我们需要在列表之上进行操作，下面的代码分别实现了 map/filter/take/takeWhile 方法。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">U</span><span class="token punctuation">,</span> items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> <span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">filter</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>\r\n  <span class="token function-variable function">predicate</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\r\n  items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>\r\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">yield</span> item<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">take</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> item<span class="token punctuation">;</span>\r\n    i<span class="token operator">++</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">takeWhile</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>\r\n  <span class="token function-variable function">predicate</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\r\n  items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>\r\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">yield</span> item<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"上面的代码都是比较简单的。比较难一点的是去实现 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zip</code>'}})," 方法，即怎么把两个列表合并成一个？"),"\n",p.createElement(a.p,null,"难点在于接收一个 Iterable 的对象的话，本身并不一定要实现 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">next</code>'}})," 方法的，比如 Array、String 等，同时 Iterable 对象也并不是都可以通过 index 来访问的。此外，如果想先通过 Array.from 变成数组，然后在数组上进行操作，我们会遇到一个情况是我们传入的 Iterable 对象是无限的，如上文的 fibonacci 一样，这种情况下是不能使用 Array.from 的。"),"\n",p.createElement(a.p,null,"这时候我的一个思路是需要想办法把一个 Iterable 的对象提升成为 IterableItorator 对象，然后通过 next 方法，逐一遍历。"),"\n",p.createElement(a.p,null,"How？幸好 Generator 给我们提供了一个 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">yield*</code>'}})," 操作符，可以让我们方便的定义出一个 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lift</code>'}})," 方法。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">lift</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">yield</span><span class="token operator">*</span> items<span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"有了这个 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lift</code>'}})," 方法之后，就可以很方便的书写 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zip</code>'}})," 方法和 ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zipWith</code>'}})," 方法了。"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">zip</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>\r\n  seqA<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\r\n  seqB<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span>\r\n<span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> itorA <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>seqA<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> itorB <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>seqB<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> valA <span class="token operator">=</span> itorA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> valB <span class="token operator">=</span> itorB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>valA<span class="token punctuation">.</span>done <span class="token operator">||</span> <span class="token operator">!</span>valB<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> <span class="token punctuation">[</span>valA<span class="token punctuation">.</span>value<span class="token punctuation">,</span> valB<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n    valA <span class="token operator">=</span> itorA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    valB <span class="token operator">=</span> itorB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">zipWith</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>\r\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">G</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">R</span><span class="token punctuation">,</span>\r\n  seqA<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\r\n  seqB<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span>\r\n<span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> itorA <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>seqA<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> itorB <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>seqB<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> valA <span class="token operator">=</span> itorA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> valB <span class="token operator">=</span> itorB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>valA<span class="token punctuation">.</span>done <span class="token operator">||</span> <span class="token operator">!</span>valB<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> <span class="token function">fn</span><span class="token punctuation">(</span>valA<span class="token punctuation">.</span>value<span class="token punctuation">,</span> valB<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    valA <span class="token operator">=</span> itorA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    valB <span class="token operator">=</span> itorB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.p,null,"更多的方法可以去底部的点开我的 repo，这里就不一一列举了。"),"\n",p.createElement(a.h2,null,"结语"),"\n",p.createElement(a.p,null,"Generator 和 Iterator 是 ES6 带给我们的非常强大的语言层面的能力，它本身的求值可以看作是惰性的。"),"\n",p.createElement(a.p,null,"差不多在 13 年左右，TJ 的 ",p.createElement(a.a,{href:"https://github.com/tj/co"},"co")," 刚出来的时候，其代码的短小精悍可以说是相当惊艳的。然而在我们的使用中，一来受限于浏览器兼容性，二来受限于我们的使用场景，个人认为我们对其特性开发得还远远不够。结合 IO、network，Generator 和 Iterator 还能为我们做更多的事情。"),"\n",p.createElement(a.p,null,"另外，需要特别说明的是，虽然这篇文章通篇是在讲惰性列表，但是惰性列表并不是银弹，相反的，惰性结构的滥用会在程序的执行过程中缓存大量的 thunk，增大在内存上的开销。"),"\n",p.createElement(a.p,null,"完整代码请移步 ",p.createElement(a.a,{href:"https://github.com/nodew/lazyList"},"GitHub"),"。"),"\n",p.createElement(a.p,null,"本文首发于",p.createElement(a.a,{href:"https://tech.youzan.com/lazy-list-with-generator-and-iterator/"},"有赞技术博客"),"。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?p.createElement(a,n,p.createElement(e,n)):e(n)},c=s(1804),l=s.n(c),r=s(1883),u=s(7484),k=s.n(u),i=s(6176),d=s.n(i),m=s(1903),g=s(507),y=s(2964);k().extend(d());const h=n=>{var a;let{data:{mdx:s},children:t}=n;return null===s?null:p.createElement(m.Z,null,p.createElement("div",{className:"max-w-5xl mx-auto"},p.createElement(g.h,{title:s.frontmatter.title||"",description:s.frontmatter.excerpt||"",type:"article",extras:[{name:"keywords",content:s.frontmatter.keywords.join(",")}]}),p.createElement("div",{className:"prose xl:prose-xl dark:prose-dark dark:xl:prose-dark-xl max-w-none"},p.createElement("h1",{className:"mb-0 xl:mb-2"},null===(a=s.frontmatter)||void 0===a?void 0:a.title),p.createElement("ul",{className:"list-none flex flex-wrap p-0 xl:p-0 my-0 xl:my-0"},s.frontmatter.tags.map((n=>p.createElement("li",{key:n,className:"flex-none ml-0 mr-4"},p.createElement(r.rU,{to:"/tags/"+l()(n||"")},p.createElement("div",{className:"flex flex-row items-center"},p.createElement(y.l,null),p.createElement("span",{className:"ml-1"},n))))))),p.createElement("div",{className:"text-gray-400 dark:text-gray-700 italic mb-12"},k()(s.frontmatter.date).format("LL")),t)))};function f(n){return p.createElement(h,n,p.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-tsx-content-file-path-d-projects-blog-posts-001-lazy-list-with-generator-and-iterator-index-mdx-a46971a072f1e73cb104.js.map