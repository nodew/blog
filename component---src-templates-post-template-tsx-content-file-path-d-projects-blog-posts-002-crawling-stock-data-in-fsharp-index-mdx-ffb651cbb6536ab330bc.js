(self.webpackChunkblog=self.webpackChunkblog||[]).push([[132],{7484:function(n){n.exports=function(){"use strict";var n=1e3,a=6e4,s=36e5,e="millisecond",t="second",o="minute",p="hour",c="day",l="week",r="month",u="quarter",i="year",k="date",d="Invalid Date",g=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,m=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,h={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(n){var a=["th","st","nd","rd"],s=n%100;return"["+n+(a[(s-20)%10]||a[s]||a[0])+"]"}},f=function(n,a,s){var e=String(n);return!e||e.length>=a?n:""+Array(a+1-e.length).join(s)+n},y={s:f,z:function(n){var a=-n.utcOffset(),s=Math.abs(a),e=Math.floor(s/60),t=s%60;return(a<=0?"+":"-")+f(e,2,"0")+":"+f(t,2,"0")},m:function n(a,s){if(a.date()<s.date())return-n(s,a);var e=12*(s.year()-a.year())+(s.month()-a.month()),t=a.clone().add(e,r),o=s-t<0,p=a.clone().add(e+(o?-1:1),r);return+(-(e+(s-t)/(o?t-p:p-t))||0)},a:function(n){return n<0?Math.ceil(n)||0:Math.floor(n)},p:function(n){return{M:r,y:i,w:l,d:c,D:k,h:p,m:o,s:t,ms:e,Q:u}[n]||String(n||"").toLowerCase().replace(/s$/,"")},u:function(n){return void 0===n}},S="en",x={};x[S]=h;var E=function(n){return n instanceof M},_=function n(a,s,e){var t;if(!a)return S;if("string"==typeof a){var o=a.toLowerCase();x[o]&&(t=o),s&&(x[o]=s,t=o);var p=a.split("-");if(!t&&p.length>1)return n(p[0])}else{var c=a.name;x[c]=a,t=c}return!e&&t&&(S=t),t||!e&&S},w=function(n,a){if(E(n))return n.clone();var s="object"==typeof a?a:{};return s.date=n,s.args=arguments,new M(s)},v=y;v.l=_,v.i=E,v.w=function(n,a){return w(n,{locale:a.$L,utc:a.$u,x:a.$x,$offset:a.$offset})};var M=function(){function h(n){this.$L=_(n.locale,null,!0),this.parse(n)}var f=h.prototype;return f.parse=function(n){this.$d=function(n){var a=n.date,s=n.utc;if(null===a)return new Date(NaN);if(v.u(a))return new Date;if(a instanceof Date)return new Date(a);if("string"==typeof a&&!/Z$/i.test(a)){var e=a.match(g);if(e){var t=e[2]-1||0,o=(e[7]||"0").substring(0,3);return s?new Date(Date.UTC(e[1],t,e[3]||1,e[4]||0,e[5]||0,e[6]||0,o)):new Date(e[1],t,e[3]||1,e[4]||0,e[5]||0,e[6]||0,o)}}return new Date(a)}(n),this.$x=n.x||{},this.init()},f.init=function(){var n=this.$d;this.$y=n.getFullYear(),this.$M=n.getMonth(),this.$D=n.getDate(),this.$W=n.getDay(),this.$H=n.getHours(),this.$m=n.getMinutes(),this.$s=n.getSeconds(),this.$ms=n.getMilliseconds()},f.$utils=function(){return v},f.isValid=function(){return!(this.$d.toString()===d)},f.isSame=function(n,a){var s=w(n);return this.startOf(a)<=s&&s<=this.endOf(a)},f.isAfter=function(n,a){return w(n)<this.startOf(a)},f.isBefore=function(n,a){return this.endOf(a)<w(n)},f.$g=function(n,a,s){return v.u(n)?this[a]:this.set(s,n)},f.unix=function(){return Math.floor(this.valueOf()/1e3)},f.valueOf=function(){return this.$d.getTime()},f.startOf=function(n,a){var s=this,e=!!v.u(a)||a,u=v.p(n),d=function(n,a){var t=v.w(s.$u?Date.UTC(s.$y,a,n):new Date(s.$y,a,n),s);return e?t:t.endOf(c)},g=function(n,a){return v.w(s.toDate()[n].apply(s.toDate("s"),(e?[0,0,0,0]:[23,59,59,999]).slice(a)),s)},m=this.$W,h=this.$M,f=this.$D,y="set"+(this.$u?"UTC":"");switch(u){case i:return e?d(1,0):d(31,11);case r:return e?d(1,h):d(0,h+1);case l:var S=this.$locale().weekStart||0,x=(m<S?m+7:m)-S;return d(e?f-x:f+(6-x),h);case c:case k:return g(y+"Hours",0);case p:return g(y+"Minutes",1);case o:return g(y+"Seconds",2);case t:return g(y+"Milliseconds",3);default:return this.clone()}},f.endOf=function(n){return this.startOf(n,!1)},f.$set=function(n,a){var s,l=v.p(n),u="set"+(this.$u?"UTC":""),d=(s={},s[c]=u+"Date",s[k]=u+"Date",s[r]=u+"Month",s[i]=u+"FullYear",s[p]=u+"Hours",s[o]=u+"Minutes",s[t]=u+"Seconds",s[e]=u+"Milliseconds",s)[l],g=l===c?this.$D+(a-this.$W):a;if(l===r||l===i){var m=this.clone().set(k,1);m.$d[d](g),m.init(),this.$d=m.set(k,Math.min(this.$D,m.daysInMonth())).$d}else d&&this.$d[d](g);return this.init(),this},f.set=function(n,a){return this.clone().$set(n,a)},f.get=function(n){return this[v.p(n)]()},f.add=function(e,u){var k,d=this;e=Number(e);var g=v.p(u),m=function(n){var a=w(d);return v.w(a.date(a.date()+Math.round(n*e)),d)};if(g===r)return this.set(r,this.$M+e);if(g===i)return this.set(i,this.$y+e);if(g===c)return m(1);if(g===l)return m(7);var h=(k={},k[o]=a,k[p]=s,k[t]=n,k)[g]||1,f=this.$d.getTime()+e*h;return v.w(f,this)},f.subtract=function(n,a){return this.add(-1*n,a)},f.format=function(n){var a=this,s=this.$locale();if(!this.isValid())return s.invalidDate||d;var e=n||"YYYY-MM-DDTHH:mm:ssZ",t=v.z(this),o=this.$H,p=this.$m,c=this.$M,l=s.weekdays,r=s.months,u=function(n,s,t,o){return n&&(n[s]||n(a,e))||t[s].slice(0,o)},i=function(n){return v.s(o%12||12,n,"0")},k=s.meridiem||function(n,a,s){var e=n<12?"AM":"PM";return s?e.toLowerCase():e},g={YY:String(this.$y).slice(-2),YYYY:this.$y,M:c+1,MM:v.s(c+1,2,"0"),MMM:u(s.monthsShort,c,r,3),MMMM:u(r,c),D:this.$D,DD:v.s(this.$D,2,"0"),d:String(this.$W),dd:u(s.weekdaysMin,this.$W,l,2),ddd:u(s.weekdaysShort,this.$W,l,3),dddd:l[this.$W],H:String(o),HH:v.s(o,2,"0"),h:i(1),hh:i(2),a:k(o,p,!0),A:k(o,p,!1),m:String(p),mm:v.s(p,2,"0"),s:String(this.$s),ss:v.s(this.$s,2,"0"),SSS:v.s(this.$ms,3,"0"),Z:t};return e.replace(m,(function(n,a){return a||g[n]||t.replace(":","")}))},f.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},f.diff=function(e,k,d){var g,m=v.p(k),h=w(e),f=(h.utcOffset()-this.utcOffset())*a,y=this-h,S=v.m(this,h);return S=(g={},g[i]=S/12,g[r]=S,g[u]=S/3,g[l]=(y-f)/6048e5,g[c]=(y-f)/864e5,g[p]=y/s,g[o]=y/a,g[t]=y/n,g)[m]||y,d?S:v.a(S)},f.daysInMonth=function(){return this.endOf(r).$D},f.$locale=function(){return x[this.$L]},f.locale=function(n,a){if(!n)return this.$L;var s=this.clone(),e=_(n,a,!0);return e&&(s.$L=e),s},f.clone=function(){return v.w(this.$d,this)},f.toDate=function(){return new Date(this.valueOf())},f.toJSON=function(){return this.isValid()?this.toISOString():null},f.toISOString=function(){return this.$d.toISOString()},f.toString=function(){return this.$d.toUTCString()},h}(),T=M.prototype;return w.prototype=T,[["$ms",e],["$s",t],["$m",o],["$H",p],["$W",c],["$M",r],["$y",i],["$D",k]].forEach((function(n){T[n[1]]=function(a){return this.$g(a,n[0],n[1])}})),w.extend=function(n,a){return n.$i||(n(a,M,w),n.$i=!0),w},w.locale=_,w.isDayjs=E,w.unix=function(n){return w(1e3*n)},w.en=x[S],w.Ls=x,w.p={},w}()},6176:function(n){n.exports=function(){"use strict";var n={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(a,s,e){var t=s.prototype,o=t.format;e.en.formats=n,t.format=function(a){void 0===a&&(a="YYYY-MM-DDTHH:mm:ssZ");var s=this.$locale().formats,e=function(a,s){return a.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(a,e,t){var o=t&&t.toUpperCase();return e||s[t]||n[t]||s[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(n,a,s){return a||s.slice(1)}))}))}(a,void 0===s?{}:s);return o.call(this,e)}}}()},3719:function(n,a,s){"use strict";s.r(a),s.d(a,{default:function(){return y}});var e=s(1151),t=s(7294);function o(n){const a=Object.assign({p:"p",h3:"h3",ul:"ul",li:"li",a:"a",span:"span"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"作为一根韭菜，很重要的当然是盯盘，这时候你是要在上班的时候掏出手机看还是打开网页看？"),"\n",t.createElement(a.p,null,"作为一根合格的韭菜，答案当然是用命令行了！够低调，同时内容又高度定制化。"),"\n",t.createElement(a.p,null,"而作为一根在 .NET 的生态里讨饭吃的韭菜，我首选的工具是 F#。"),"\n",t.createElement(a.h3,null,"为什么选择 FSharp"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"F# 是 Functional base 的编程语言，相较于 C#，语法更灵活也更简洁。同时 F# 并不如 Haskell 那般 strict，可以使用多范式去构建程序，所以也可以很方便的使用 .NET 上其他的绝大多数 DLL 库，无缝和 C# 进行交互。换言之，.NET 拥有的能力，F# 都可以有。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"相较于 C#，F# 拥有更强大的类型系统。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"虽然相对于其他 OOP 风格的语言来说，C# 已经有了 LINQ 这样的大杀器，但是 F# 借助 computation expression 的扩展，不但支持类 LINQ 的语法 ",t.createElement(a.a,{href:"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/query-expressions"},"Query Expression"),"，而且更强大，也更易于扩展。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"同样得益于 computation expression，F# 有更好的异步支持 ",t.createElement(a.a,{href:"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/asynchronous-workflows"},"Async Workflow")),"\n"),"\n"),"\n",t.createElement(a.p,null,"简单讲就是 C# 有的 F# 都有，同时 F# 可以更简洁。"),"\n",t.createElement(a.h3,null,"初始化项目"),"\n",t.createElement(a.p,null,"进入正题，首先，需要去创建一个新的 Project。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell">dotnet new console <span class="token operator">-</span>lang F<span class="token comment"># -o TStock</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-lang</code>'}})," 指定使用的编程语言是 F#, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-o</code>'}})," 指定了项目目录名称。"),"\n",t.createElement(a.p,null,"然后在生成的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Program.fs</code>'}})," 中可以看到如下代码"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token comment">// Learn more about F# at http://fsharp.org</span>\r\n\r\n<span class="token keyword">open</span> System\r\n\r\n<span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">EntryPoint</span><span class="token punctuation">>]</span></span>\r\n<span class="token keyword">let</span> main argv <span class="token operator">=</span>\r\n    printfn <span class="token string">"Hello World from F#!"</span>\r\n    <span class="token number">0</span> <span class="token comment">// return an integer exit code</span>\r\n</code></pre></div>'}}),"\n",t.createElement(a.p,null,"使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dotnet run</code>'}})," 执行可以得到输出 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Hello World from F#!</code>'}}),"。"),"\n",t.createElement(a.h3,null,"使用 paket 管理依赖"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"https://fsprojects.github.io/Paket/index.html"},"paket")," 是 F# 社区实现的一款包管理工具，相较于 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nuget</code>'}})," 来说更灵活一些，可以同时用来管理 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nuget</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">github</code>'}})," 上的依赖。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell">choco install paket</code></pre></div>'}}),"\n",t.createElement(a.p,null,"如果没有安装过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket</code>'}}),"，可以用 ",t.createElement(a.a,{href:"https://chocolatey.org/"},"chocolatey")," 方便的安装 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket</code>'}}),", 安装好之后，需要在项目中初始化 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket</code>'}})),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell">paket init</code></pre></div>'}}),"\n",t.createElement(a.p,null,"这是时候项目中多出了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.paket</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.paket-files</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket.dependencies</code>'}}),"。"),"\n",t.createElement(a.p,null,"在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket.dependencies</code>'}})," 中写入依赖如下"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">source https://www.nuget.org/api/v2\r\n\r\nnuget FSharp.Core\r\nnuget FSharp.Data\r\nnuget FSharp.Json</code></pre></div>'}}),"\n",t.createElement(a.p,null,"使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.\\paket\\paket.exe install</code>'}})," 安装依赖。"),"\n",t.createElement(a.p,null,"这时候声明的依赖都安装到了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">packages</code>'}})," 目录下，那么怎么使用呢?"),"\n",t.createElement(a.p,null,"在和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.fsproj</code>'}}),"同目录的地方创建一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket.references</code>'}})," 文件，里面写入这个项目的依赖"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">FSharp.Core\r\nFSharp.Data\r\nFSharp.Json</code></pre></div>'}}),"\n",t.createElement(a.p,null,"这主要是因为考虑到通常一个 solution 下面需要很多个 project 的情况。"),"\n",t.createElement(a.p,null,"再跑一次 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.\\paket\\paket.exe install</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.paket</code>'}})," 目录下多了一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Paket.Restore.targets</code>'}})," 文件，fsproj 文件中也多出了一行"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="xml"><pre class="language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Import</span> <span class="token attr-name">Project</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.paket\\Paket.Restore.targets<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"通过这个文件，就可以在项目中引用到安装的依赖了。"),"\n",t.createElement(a.h3,null,"编写代码"),"\n",t.createElement(a.p,null,"先保留 main 函数里面的部分不动，开始代码逻辑部分的处理。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">type</span> <span class="token class-name">Code</span> <span class="token operator">=</span> Code <span class="token keyword">of</span> <span class="token class-name">string</span>\r\n\r\n<span class="token keyword">type</span> <span class="token class-name">StockCode</span> <span class="token operator">=</span>\r\n    <span class="token operator">|</span> SH <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> SZ <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> HK <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> NSDQ <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n\r\n<span class="token keyword">type</span> <span class="token class-name">Stock</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n    Name<span class="token punctuation">:</span> <span class="token class-name">string</span>\r\n    Code<span class="token punctuation">:</span> <span class="token class-name">StockCode</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Code</code>'}})," 是股票编码，但是 A 股、港股、美股等都有不同情况要处理，如何进行区分？所以我引入了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StockCode</code>'}})," 的 union type，这样就有办法描述更多的股票了。"),"\n",t.createElement(a.p,null,"如果用 C# 会是什么情况？"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">BaseCode</span>\r\n<span class="token punctuation">{</span>\r\n    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> _code <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\r\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Code\r\n    <span class="token punctuation">{</span>\r\n        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> _code<span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token function">Sz</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> code<span class="token punctuation">)</span>\r\n    <span class="token punctuation">{</span>\r\n        _code <span class="token operator">=</span> code\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> Code<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">class</span> <span class="token class-name">SHCode</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseCode</span></span> <span class="token punctuation">{</span>\r\n    <span class="token function">SHCode</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">code</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\r\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> <span class="token string">"sh"</span> <span class="token operator">+</span> Code<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">class</span> <span class="token class-name">SZCode</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseCode</span></span>\r\n<span class="token punctuation">{</span>\r\n    <span class="token comment">/// blabla</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">class</span> <span class="token class-name">HKCode</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseCode</span></span>\r\n<span class="token punctuation">{</span>\r\n    <span class="token comment">/// blabla</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token comment">/// blabla</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"接下来就是数据部分了，这部分不是我的重点，很多网站都有股票实时数据，比如新浪股票，都是可以的选择。值得注意的是，这些网站都加了反爬虫的技术，另一方面，股票数据要实时刷新，为了逻辑上统一，股票数据一般都是由异步接口提供，jsonp 或者 json，具体的接口不同的网站不同，需要自己去分析。"),"\n",t.createElement(a.p,null,"找到接口之后，就可以愉快的拿数据来玩耍了。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">type</span> <span class="token class-name">StockData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n    Price<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    Open<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    High<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    Low<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    UpDown<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    UpDownRate<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    ExchangeRatio<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">type</span> <span class="token class-name">StockResult</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n    Stock<span class="token punctuation">:</span> <span class="token class-name">Stock</span>\r\n    Data<span class="token punctuation">:</span> <span class="token class-name">StockData</span> option\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StockData</code>'}})," 定义了拿到的数据格式，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StockResult</code>'}})," 定义了完整的返回结果，将数据信息和股票信息关联起来，方便后面的处理。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> getStockData <span class="token punctuation">(</span>stock<span class="token punctuation">:</span> <span class="token class-name">Stock</span><span class="token punctuation">)</span> <span class="token operator">=</span>\r\n    <span class="token computation-expression keyword">async</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">let</span> code <span class="token operator">=</span> stock<span class="token punctuation">.</span>Code\r\n        <span class="token keyword">let</span> baseURL <span class="token operator">=</span> sprintf <span class="token string">"http://%s.%s/%s/quotelist"</span> <span class="token punctuation">(</span>getHostPrefix code<span class="token punctuation">)</span> baseHost <span class="token punctuation">(</span>getRegion code<span class="token punctuation">)</span>\r\n        <span class="token keyword">let</span> url <span class="token operator">=</span> sprintf <span class="token string">"%s?code=%s&amp;column=%s&amp;callback=%s"</span> baseURL <span class="token punctuation">(</span>getCodeString code<span class="token punctuation">)</span> column callback\r\n        <span class="token keyword">let!</span> resp <span class="token operator">=</span> Http<span class="token punctuation">.</span>AsyncRequest url\r\n        <span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">></span> <span class="token number">300</span> <span class="token keyword">then</span>\r\n            <span class="token keyword">return</span> <span class="token punctuation">{</span> Stock <span class="token operator">=</span> stock<span class="token punctuation">;</span> Data <span class="token operator">=</span> None <span class="token punctuation">}</span>\r\n        <span class="token keyword">else</span>\r\n            <span class="token keyword">let</span> stockData <span class="token operator">=</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|></span> parseData code\r\n            <span class="token keyword">return</span> <span class="token punctuation">{</span> Stock <span class="token operator">=</span> stock<span class="token punctuation">;</span> Data <span class="token operator">=</span> stockData <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里的逻辑很简单，就是拿到传入一只股票的基本信息，根据股票的 code 信息拼出完整 url，再通过一个异步请求去获取数据。这里的异步请求本身可能因为各种原因失败，所以这里的 Data 是一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Option</code>'}})," 类型的结果。"),"\n",t.createElement(a.p,null,"我这里取的是一个 jsonp 的请求，不能直接 deserialize 成一个对象，所以用了一个额外的 parseData 方法来处理数据"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> parseData code <span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">string</span><span class="token punctuation">)</span> <span class="token operator">=</span>\r\n    <span class="token keyword">try</span>\r\n        <span class="token keyword">let</span> valuePart <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\r\n        <span class="token keyword">let</span> unit <span class="token operator">=</span> <span class="token keyword">match</span> code <span class="token keyword">with</span>\r\n                    <span class="token operator">|</span> HK _ <span class="token operator">-></span> <span class="token number">1000.0</span>\r\n                    <span class="token operator">|</span> _ <span class="token operator">-></span> <span class="token number">100.0</span>\r\n        valuePart<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> valuePart<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>\r\n        <span class="token operator">|></span> Seq<span class="token punctuation">.</span>map <span class="token punctuation">(</span>float <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token keyword">fun</span> x <span class="token operator">-></span> x <span class="token operator">/</span> unit<span class="token punctuation">)</span><span class="token punctuation">)</span>\r\n        <span class="token operator">|></span> Seq<span class="token punctuation">.</span>toArray\r\n        <span class="token operator">|></span> <span class="token keyword">fun</span> s <span class="token operator">-></span>\r\n            <span class="token computation-expression keyword">Some</span> <span class="token punctuation">{</span>\r\n                Price <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\r\n                Open <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\r\n                High <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\r\n                Low <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>\r\n                UpDown <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\r\n                UpDownRate <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>\r\n                ExchangeRatio <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>\r\n            <span class="token punctuation">}</span>\r\n    <span class="token keyword">with</span>\r\n        <span class="token operator">|</span> _ <span class="token operator">-></span> None</code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里 parse 本身是一个极容易发生错误的过程，返回结果不对，或者返回结果不规范都有可能导致失败，由于我不关心错误原因，所以只要错误返回 None 就可以了，try 里面只关心正常的逻辑，这样可以让代码更好读一点。"),"\n",t.createElement(a.p,null,"这里面有两个奇怪的符号 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">|></code>'}}),"、 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">>></code>'}}),"，它们本质上都是函数，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">|></code>'}})," 的定义是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">( |> ): 'T1 -> ('T1 -> 'U) -> 'U</code>"}}),"，即将左侧的参数 apply 到右侧的函数中，返回其结果，类似于一个管道，将数据流处理通过一个个函数串联起来，基本上是 fsharp 中最常见的符号了。",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">>></code>'}})," 的定义是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">( >> ) : ('T1 -> 'T2) -> ('T2 -> 'T3) -> 'T1 -> 'T3</code>"}}),"，即 compose 函数，将两个函数组装成一个函数。"),"\n",t.createElement(a.p,null,"还有一个比较 tricky 的事实是，fsharp 去处理这样的中缀符号的结合性的时候，是通过符号的形状来决定的，而不是像 Haskell 那样去显式的声明其结合性和优先级。"),"\n",t.createElement(a.p,null,"有了这些方法之后，主要功能就基本上完成了。最后来更改 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main</code>'}})," 函数。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">EntryPoint</span><span class="token punctuation">>]</span></span>\r\n<span class="token keyword">let</span> main argv <span class="token operator">=</span>\r\n    <span class="token keyword">let</span> stocks <span class="token operator">=</span> <span class="token punctuation">[</span>\r\n        <span class="token punctuation">{</span>\r\n            Name <span class="token operator">=</span> <span class="token string">"MSFT"</span><span class="token punctuation">;</span>\r\n            Code <span class="token operator">=</span> NSDQ <span class="token punctuation">(</span>Code <span class="token string">"MSFT"</span><span class="token punctuation">)</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">]</span>\r\n\r\n    stocks\r\n    <span class="token operator">|></span> Seq<span class="token punctuation">.</span>map getStockData\r\n    <span class="token operator">|></span> Async<span class="token punctuation">.</span>Parallel\r\n    <span class="token operator">|></span> Async<span class="token punctuation">.</span>RunSynchronously\r\n    <span class="token operator">|></span> Seq<span class="token punctuation">.</span>iter\r\n        <span class="token punctuation">(</span><span class="token keyword">fun</span> result <span class="token operator">-></span>\r\n            <span class="token keyword">match</span> result <span class="token keyword">with</span>\r\n            <span class="token operator">|</span> result <span class="token keyword">when</span> result<span class="token punctuation">.</span>Data <span class="token operator">=</span> None <span class="token operator">-></span> printfn <span class="token string">"|%-20s|%10s|%10s|%10s|%10s|%10s|%10s|"</span> result<span class="token punctuation">.</span>Stock<span class="token punctuation">.</span>Name <span class="token string">"_"</span> <span class="token string">"_"</span> <span class="token string">"_"</span> <span class="token string">"_"</span> <span class="token string">"_"</span> <span class="token string">"_"</span>\r\n            <span class="token operator">|</span> <span class="token punctuation">{</span> StockResult<span class="token punctuation">.</span>Stock <span class="token operator">=</span> stock<span class="token punctuation">;</span> StockResult<span class="token punctuation">.</span>Data <span class="token operator">=</span> Some data <span class="token punctuation">}</span> <span class="token operator">-></span>\r\n                printfn <span class="token string">"|%-20s|%10.2f|%10.2f|%10.2f|%10.2f|%10.2f|%10.2f%%|"</span> stock<span class="token punctuation">.</span>Name data<span class="token punctuation">.</span>Price data<span class="token punctuation">.</span>Open data<span class="token punctuation">.</span>Low data<span class="token punctuation">.</span>High data<span class="token punctuation">.</span>UpDown data<span class="token punctuation">.</span>UpDownRate\r\n            <span class="token operator">|</span> _ <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\r\n        <span class="token punctuation">)</span>\r\n    <span class="token number">0</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里有使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">printfn</code>'}})," 将最后拿到的结果打印成表格呈现到终端。"),"\n",t.createElement(a.h3,null,"扩展应用"),"\n",t.createElement(a.p,null,"为了让代码更灵活，这里把 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">stocks</code>'}})," 放到一个外部 json 文件中，通过命令行参数进行捕获。这里我用到的是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FSharp.Json</code>'}})," 这个库。"),"\n",t.createElement(a.p,null,"首先需要给最初定义的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StockCode</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Stock</code>'}})," 类型加一些辅助的 attribute。这里涉及到一个 union type 的映射问题，当然，这里的代码是非常直白的。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">open</span> FSharp<span class="token punctuation">.</span>Json\r\n\r\n<span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">JsonUnion</span><span class="token annotation-content"><span class="token punctuation">(</span>Mode<span class="token operator">=</span>UnionMode<span class="token punctuation">.</span>CaseKeyAsFieldValue<span class="token punctuation">,</span> CaseKeyField<span class="token operator">=</span><span class="token string">"type"</span><span class="token punctuation">,</span> CaseValueField<span class="token operator">=</span><span class="token string">"code"</span><span class="token punctuation">)</span></span><span class="token punctuation">>]</span></span>\r\n<span class="token keyword">type</span> <span class="token class-name">StockCode</span> <span class="token operator">=</span>\r\n    <span class="token operator">|</span> SH <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> SZ <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> HK <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> NSDQ <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n\r\n<span class="token keyword">type</span> <span class="token class-name">Stock</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n    <span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">JsonField</span><span class="token annotation-content"><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span></span><span class="token punctuation">>]</span></span>\r\n    Name<span class="token punctuation">:</span> <span class="token class-name">string</span>\r\n    <span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">JsonField</span><span class="token annotation-content"><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span></span><span class="token punctuation">>]</span></span>\r\n    Code<span class="token punctuation">:</span> <span class="token class-name">StockCode</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"然后是更改我们的 main 函数。通过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">argv</code>'}})," 传入 filename，再通过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">File</code>'}})," 把内容读取到程序中，最后通过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FSharp.Json</code>'}})," deserialize 成我们需要的结构，其他统统保持不变。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">EntryPoint</span><span class="token punctuation">>]</span></span>\r\n<span class="token keyword">let</span> main argv <span class="token operator">=</span>\r\n    <span class="token keyword">let</span> filename <span class="token operator">=</span> argv<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\r\n    <span class="token keyword">let</span> content <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>\r\n    <span class="token keyword">let</span> stocks <span class="token operator">=</span> Json<span class="token punctuation">.</span>deserialize<span class="token operator">&lt;</span>Stock<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\r\n\r\n    <span class="token comment">// ...</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"下面是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">stocks.json</code>'}})," 文件的一个示例。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">[</span>\r\n    <span class="token punctuation">{</span>\r\n        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"MSFT"</span><span class="token punctuation">,</span>\r\n        <span class="token property">"code"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"NSDQ"</span><span class="token punctuation">,</span>\r\n            <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"MSFT"</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">]</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"以上，就是整个应用的主要实现了，当然为了节省篇幅，中间省去了一些细枝末节。"),"\n",t.createElement(a.p,null,"完整的代码可以去访问我的 ",t.createElement(a.a,{href:"https://github.com/nodew/TStock"},"Github")," 查看。"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)},c=s(1804),l=s.n(c),r=s(1883),u=s(7484),i=s.n(u),k=s(6176),d=s.n(k),g=s(1689),m=s(507),h=s(2964);i().extend(d());const f=n=>{var a;let{data:{mdx:s},children:e}=n;return null===s?null:t.createElement(g.Z,null,t.createElement("div",{className:"max-w-5xl mx-auto"},t.createElement(m.h,{title:s.frontmatter.title||"",description:s.frontmatter.excerpt||"",type:"article",extras:[{name:"keywords",content:s.frontmatter.keywords.join(",")}]}),t.createElement("div",{className:"prose xl:prose-xl dark:prose-dark dark:xl:prose-dark-xl max-w-none"},t.createElement("h1",{className:"mb-0 xl:mb-2"},null===(a=s.frontmatter)||void 0===a?void 0:a.title),t.createElement("ul",{className:"list-none flex flex-wrap p-0 xl:p-0 my-0 xl:my-0"},s.frontmatter.tags.map((n=>t.createElement("li",{key:n,className:"flex-none ml-0 mr-4"},t.createElement(r.rU,{to:"/tags/"+l()(n||"")},t.createElement("div",{className:"flex flex-row items-center"},t.createElement(h.l,null),t.createElement("span",{className:"ml-1"},n))))))),t.createElement("div",{className:"text-gray-400 dark:text-gray-700 italic mb-12"},i()(s.frontmatter.date).format("LL")),e)))};function y(n){return t.createElement(f,n,t.createElement(p,n))}},2964:function(n,a,s){"use strict";s.d(a,{l:function(){return t}});var e=s(7294);const t=n=>{let{size:a=20}=n;return e.createElement("svg",{width:a,height:a,fill:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},e.createElement("path",{d:"M19.75 2A2.25 2.25 0 0 1 22 4.25v5.462a3.25 3.25 0 0 1-.952 2.298l-8.5 8.503a3.255 3.255 0 0 1-4.597.001L3.489 16.06a3.25 3.25 0 0 1-.003-4.596l8.5-8.51A3.25 3.25 0 0 1 14.284 2h5.465Zm0 1.5h-5.465c-.465 0-.91.185-1.239.513l-8.512 8.523a1.75 1.75 0 0 0 .015 2.462l4.461 4.454a1.755 1.755 0 0 0 2.477 0l8.5-8.503a1.75 1.75 0 0 0 .513-1.237V4.25a.75.75 0 0 0-.75-.75ZM17 5.502a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"}))}},2705:function(n,a,s){var e=s(5639).Symbol;n.exports=e},9932:function(n){n.exports=function(n,a){for(var s=-1,e=null==n?0:n.length,t=Array(e);++s<e;)t[s]=a(n[s],s,n);return t}},2663:function(n){n.exports=function(n,a,s,e){var t=-1,o=null==n?0:n.length;for(e&&o&&(s=n[++t]);++t<o;)s=a(s,n[t],t,n);return s}},9029:function(n){var a=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;n.exports=function(n){return n.match(a)||[]}},4239:function(n,a,s){var e=s(2705),t=s(9607),o=s(2333),p="[object Null]",c="[object Undefined]",l=e?e.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?c:p:l&&l in Object(n)?t(n):o(n)}},8674:function(n){n.exports=function(n){return function(a){return null==n?void 0:n[a]}}},531:function(n,a,s){var e=s(2705),t=s(9932),o=s(1469),p=s(3448),c=1/0,l=e?e.prototype:void 0,r=l?l.toString:void 0;n.exports=function n(a){if("string"==typeof a)return a;if(o(a))return t(a,n)+"";if(p(a))return r?r.call(a):"";var s=a+"";return"0"==s&&1/a==-c?"-0":s}},5393:function(n,a,s){var e=s(2663),t=s(3816),o=s(8748),p=RegExp("['’]","g");n.exports=function(n){return function(a){return e(o(t(a).replace(p,"")),n,"")}}},9389:function(n,a,s){var e=s(8674)({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"});n.exports=e},1957:function(n,a,s){var e="object"==typeof s.g&&s.g&&s.g.Object===Object&&s.g;n.exports=e},9607:function(n,a,s){var e=s(2705),t=Object.prototype,o=t.hasOwnProperty,p=t.toString,c=e?e.toStringTag:void 0;n.exports=function(n){var a=o.call(n,c),s=n[c];try{n[c]=void 0;var e=!0}catch(l){}var t=p.call(n);return e&&(a?n[c]=s:delete n[c]),t}},3157:function(n){var a=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;n.exports=function(n){return a.test(n)}},2333:function(n){var a=Object.prototype.toString;n.exports=function(n){return a.call(n)}},5639:function(n,a,s){var e=s(1957),t="object"==typeof self&&self&&self.Object===Object&&self,o=e||t||Function("return this")();n.exports=o},2757:function(n){var a="\\ud800-\\udfff",s="\\u2700-\\u27bf",e="a-z\\xdf-\\xf6\\xf8-\\xff",t="A-Z\\xc0-\\xd6\\xd8-\\xde",o="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",p="["+o+"]",c="\\d+",l="["+s+"]",r="["+e+"]",u="[^"+a+o+c+s+e+t+"]",i="(?:\\ud83c[\\udde6-\\uddff]){2}",k="[\\ud800-\\udbff][\\udc00-\\udfff]",d="["+t+"]",g="(?:"+r+"|"+u+")",m="(?:"+d+"|"+u+")",h="(?:['’](?:d|ll|m|re|s|t|ve))?",f="(?:['’](?:D|LL|M|RE|S|T|VE))?",y="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",S="[\\ufe0e\\ufe0f]?",x=S+y+("(?:\\u200d(?:"+["[^"+a+"]",i,k].join("|")+")"+S+y+")*"),E="(?:"+[l,i,k].join("|")+")"+x,_=RegExp([d+"?"+r+"+"+h+"(?="+[p,d,"$"].join("|")+")",m+"+"+f+"(?="+[p,d+g,"$"].join("|")+")",d+"?"+g+"+"+h,d+"+"+f,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",c,E].join("|"),"g");n.exports=function(n){return n.match(_)||[]}},3816:function(n,a,s){var e=s(9389),t=s(9833),o=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,p=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");n.exports=function(n){return(n=t(n))&&n.replace(o,e).replace(p,"")}},1469:function(n){var a=Array.isArray;n.exports=a},7005:function(n){n.exports=function(n){return null!=n&&"object"==typeof n}},3448:function(n,a,s){var e=s(4239),t=s(7005),o="[object Symbol]";n.exports=function(n){return"symbol"==typeof n||t(n)&&e(n)==o}},1804:function(n,a,s){var e=s(5393)((function(n,a,s){return n+(s?"-":"")+a.toLowerCase()}));n.exports=e},9833:function(n,a,s){var e=s(531);n.exports=function(n){return null==n?"":e(n)}},8748:function(n,a,s){var e=s(9029),t=s(3157),o=s(9833),p=s(2757);n.exports=function(n,a,s){return n=o(n),void 0===(a=s?void 0:a)?t(n)?p(n):e(n):n.match(a)||[]}},1151:function(n,a,s){"use strict";s.d(a,{ah:function(){return o}});var e=s(7294);const t=e.createContext({});function o(n){const a=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-templates-post-template-tsx-content-file-path-d-projects-blog-posts-002-crawling-stock-data-in-fsharp-index-mdx-ffb651cbb6536ab330bc.js.map