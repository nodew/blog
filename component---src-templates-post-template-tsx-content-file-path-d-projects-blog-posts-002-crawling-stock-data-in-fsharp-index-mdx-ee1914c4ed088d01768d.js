"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[132],{6675:function(n,a,s){s.r(a),s.d(a,{default:function(){return E}});var e=s(3677),t=s(9953);function p(n){const a=Object.assign({p:"p",h3:"h3",ul:"ul",li:"li",a:"a",span:"span"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"作为一根韭菜，很重要的当然是盯盘，这时候你是要在上班的时候掏出手机看还是打开网页看？"),"\n",t.createElement(a.p,null,"作为一根合格的韭菜，答案当然是用命令行了！够低调，同时内容又高度定制化。"),"\n",t.createElement(a.p,null,"而作为一根在 .NET 的生态里讨饭吃的韭菜，我首选的工具是 F#。"),"\n",t.createElement(a.h3,null,"为什么选择 FSharp"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"F# 是 Functional base 的编程语言，相较于 C#，语法更灵活也更简洁。同时 F# 并不如 Haskell 那般 strict，可以使用多范式去构建程序，所以也可以很方便的使用 .NET 上其他的绝大多数 DLL 库，无缝和 C# 进行交互。换言之，.NET 拥有的能力，F# 都可以有。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"相较于 C#，F# 拥有更强大的类型系统。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"虽然相对于其他 OOP 风格的语言来说，C# 已经有了 LINQ 这样的大杀器，但是 F# 借助 computation expression 的扩展，不但支持类 LINQ 的语法 ",t.createElement(a.a,{href:"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/query-expressions"},"Query Expression"),"，而且更强大，也更易于扩展。"),"\n"),"\n",t.createElement(a.li,null,"\n",t.createElement(a.p,null,"同样得益于 computation expression，F# 有更好的异步支持 ",t.createElement(a.a,{href:"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/asynchronous-workflows"},"Async Workflow")),"\n"),"\n"),"\n",t.createElement(a.p,null,"简单讲就是 C# 有的 F# 都有，同时 F# 可以更简洁。"),"\n",t.createElement(a.h3,null,"初始化项目"),"\n",t.createElement(a.p,null,"进入正题，首先，需要去创建一个新的 Project。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell">dotnet new console <span class="token operator">-</span>lang F<span class="token comment"># -o TStock</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-lang</code>'}})," 指定使用的编程语言是 F#, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-o</code>'}})," 指定了项目目录名称。"),"\n",t.createElement(a.p,null,"然后在生成的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Program.fs</code>'}})," 中可以看到如下代码"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token comment">// Learn more about F# at http://fsharp.org</span>\r\n\r\n<span class="token keyword">open</span> System\r\n\r\n<span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">EntryPoint</span><span class="token punctuation">>]</span></span>\r\n<span class="token keyword">let</span> main argv <span class="token operator">=</span>\r\n    printfn <span class="token string">"Hello World from F#!"</span>\r\n    <span class="token number">0</span> <span class="token comment">// return an integer exit code</span>\r\n</code></pre></div>'}}),"\n",t.createElement(a.p,null,"使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dotnet run</code>'}})," 执行可以得到输出 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Hello World from F#!</code>'}}),"。"),"\n",t.createElement(a.h3,null,"使用 paket 管理依赖"),"\n",t.createElement(a.p,null,t.createElement(a.a,{href:"https://fsprojects.github.io/Paket/index.html"},"paket")," 是 F# 社区实现的一款包管理工具，相较于 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nuget</code>'}})," 来说更灵活一些，可以同时用来管理 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nuget</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">github</code>'}})," 上的依赖。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell">choco install paket</code></pre></div>'}}),"\n",t.createElement(a.p,null,"如果没有安装过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket</code>'}}),"，可以用 ",t.createElement(a.a,{href:"https://chocolatey.org/"},"chocolatey")," 方便的安装 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket</code>'}}),", 安装好之后，需要在项目中初始化 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket</code>'}})),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell">paket init</code></pre></div>'}}),"\n",t.createElement(a.p,null,"这是时候项目中多出了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.paket</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.paket-files</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket.dependencies</code>'}}),"。"),"\n",t.createElement(a.p,null,"在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket.dependencies</code>'}})," 中写入依赖如下"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">source https://www.nuget.org/api/v2\r\n\r\nnuget FSharp.Core\r\nnuget FSharp.Data\r\nnuget FSharp.Json</code></pre></div>'}}),"\n",t.createElement(a.p,null,"使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.\\paket\\paket.exe install</code>'}})," 安装依赖。"),"\n",t.createElement(a.p,null,"这时候声明的依赖都安装到了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">packages</code>'}})," 目录下，那么怎么使用呢?"),"\n",t.createElement(a.p,null,"在和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*.fsproj</code>'}}),"同目录的地方创建一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paket.references</code>'}})," 文件，里面写入这个项目的依赖"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">FSharp.Core\r\nFSharp.Data\r\nFSharp.Json</code></pre></div>'}}),"\n",t.createElement(a.p,null,"这主要是因为考虑到通常一个 solution 下面需要很多个 project 的情况。"),"\n",t.createElement(a.p,null,"再跑一次 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.\\paket\\paket.exe install</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.paket</code>'}})," 目录下多了一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Paket.Restore.targets</code>'}})," 文件，fsproj 文件中也多出了一行"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="xml"><pre class="language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Import</span> <span class="token attr-name">Project</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.paket\\Paket.Restore.targets<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"通过这个文件，就可以在项目中引用到安装的依赖了。"),"\n",t.createElement(a.h3,null,"编写代码"),"\n",t.createElement(a.p,null,"先保留 main 函数里面的部分不动，开始代码逻辑部分的处理。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">type</span> <span class="token class-name">Code</span> <span class="token operator">=</span> Code <span class="token keyword">of</span> <span class="token class-name">string</span>\r\n\r\n<span class="token keyword">type</span> <span class="token class-name">StockCode</span> <span class="token operator">=</span>\r\n    <span class="token operator">|</span> SH <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> SZ <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> HK <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> NSDQ <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n\r\n<span class="token keyword">type</span> <span class="token class-name">Stock</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n    Name<span class="token punctuation">:</span> <span class="token class-name">string</span>\r\n    Code<span class="token punctuation">:</span> <span class="token class-name">StockCode</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Code</code>'}})," 是股票编码，但是 A 股、港股、美股等都有不同情况要处理，如何进行区分？所以我引入了 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StockCode</code>'}})," 的 union type，这样就有办法描述更多的股票了。"),"\n",t.createElement(a.p,null,"如果用 C# 会是什么情况？"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">BaseCode</span>\r\n<span class="token punctuation">{</span>\r\n    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> _code <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\r\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Code\r\n    <span class="token punctuation">{</span>\r\n        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n            <span class="token keyword">return</span> _code<span class="token punctuation">;</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token function">Sz</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> code<span class="token punctuation">)</span>\r\n    <span class="token punctuation">{</span>\r\n        _code <span class="token operator">=</span> code\r\n    <span class="token punctuation">}</span>\r\n\r\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> Code<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">class</span> <span class="token class-name">SHCode</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseCode</span></span> <span class="token punctuation">{</span>\r\n    <span class="token function">SHCode</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">code</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\r\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r\n    <span class="token punctuation">{</span>\r\n        <span class="token keyword">return</span> <span class="token string">"sh"</span> <span class="token operator">+</span> Code<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">class</span> <span class="token class-name">SZCode</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseCode</span></span>\r\n<span class="token punctuation">{</span>\r\n    <span class="token comment">/// blabla</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">class</span> <span class="token class-name">HKCode</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseCode</span></span>\r\n<span class="token punctuation">{</span>\r\n    <span class="token comment">/// blabla</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token comment">/// blabla</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"接下来就是数据部分了，这部分不是我的重点，很多网站都有股票实时数据，比如新浪股票，都是可以的选择。值得注意的是，这些网站都加了反爬虫的技术，另一方面，股票数据要实时刷新，为了逻辑上统一，股票数据一般都是由异步接口提供，jsonp 或者 json，具体的接口不同的网站不同，需要自己去分析。"),"\n",t.createElement(a.p,null,"找到接口之后，就可以愉快的拿数据来玩耍了。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">type</span> <span class="token class-name">StockData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n    Price<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    Open<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    High<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    Low<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    UpDown<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    UpDownRate<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n    ExchangeRatio<span class="token punctuation">:</span> <span class="token class-name">float</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">type</span> <span class="token class-name">StockResult</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n    Stock<span class="token punctuation">:</span> <span class="token class-name">Stock</span>\r\n    Data<span class="token punctuation">:</span> <span class="token class-name">StockData</span> option\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StockData</code>'}})," 定义了拿到的数据格式，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StockResult</code>'}})," 定义了完整的返回结果，将数据信息和股票信息关联起来，方便后面的处理。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> getStockData <span class="token punctuation">(</span>stock<span class="token punctuation">:</span> <span class="token class-name">Stock</span><span class="token punctuation">)</span> <span class="token operator">=</span>\r\n    <span class="token computation-expression keyword">async</span> <span class="token punctuation">{</span>\r\n        <span class="token keyword">let</span> code <span class="token operator">=</span> stock<span class="token punctuation">.</span>Code\r\n        <span class="token keyword">let</span> baseURL <span class="token operator">=</span> sprintf <span class="token string">"http://%s.%s/%s/quotelist"</span> <span class="token punctuation">(</span>getHostPrefix code<span class="token punctuation">)</span> baseHost <span class="token punctuation">(</span>getRegion code<span class="token punctuation">)</span>\r\n        <span class="token keyword">let</span> url <span class="token operator">=</span> sprintf <span class="token string">"%s?code=%s&amp;column=%s&amp;callback=%s"</span> baseURL <span class="token punctuation">(</span>getCodeString code<span class="token punctuation">)</span> column callback\r\n        <span class="token keyword">let!</span> resp <span class="token operator">=</span> Http<span class="token punctuation">.</span>AsyncRequest url\r\n        <span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">></span> <span class="token number">300</span> <span class="token keyword">then</span>\r\n            <span class="token keyword">return</span> <span class="token punctuation">{</span> Stock <span class="token operator">=</span> stock<span class="token punctuation">;</span> Data <span class="token operator">=</span> None <span class="token punctuation">}</span>\r\n        <span class="token keyword">else</span>\r\n            <span class="token keyword">let</span> stockData <span class="token operator">=</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|></span> parseData code\r\n            <span class="token keyword">return</span> <span class="token punctuation">{</span> Stock <span class="token operator">=</span> stock<span class="token punctuation">;</span> Data <span class="token operator">=</span> stockData <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里的逻辑很简单，就是拿到传入一只股票的基本信息，根据股票的 code 信息拼出完整 url，再通过一个异步请求去获取数据。这里的异步请求本身可能因为各种原因失败，所以这里的 Data 是一个 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Option</code>'}})," 类型的结果。"),"\n",t.createElement(a.p,null,"我这里取的是一个 jsonp 的请求，不能直接 deserialize 成一个对象，所以用了一个额外的 parseData 方法来处理数据"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">let</span> parseData code <span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token class-name">string</span><span class="token punctuation">)</span> <span class="token operator">=</span>\r\n    <span class="token keyword">try</span>\r\n        <span class="token keyword">let</span> valuePart <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\r\n        <span class="token keyword">let</span> unit <span class="token operator">=</span> <span class="token keyword">match</span> code <span class="token keyword">with</span>\r\n                    <span class="token operator">|</span> HK _ <span class="token operator">-></span> <span class="token number">1000.0</span>\r\n                    <span class="token operator">|</span> _ <span class="token operator">-></span> <span class="token number">100.0</span>\r\n        valuePart<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> valuePart<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>\r\n        <span class="token operator">|></span> Seq<span class="token punctuation">.</span>map <span class="token punctuation">(</span>float <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token keyword">fun</span> x <span class="token operator">-></span> x <span class="token operator">/</span> unit<span class="token punctuation">)</span><span class="token punctuation">)</span>\r\n        <span class="token operator">|></span> Seq<span class="token punctuation">.</span>toArray\r\n        <span class="token operator">|></span> <span class="token keyword">fun</span> s <span class="token operator">-></span>\r\n            <span class="token computation-expression keyword">Some</span> <span class="token punctuation">{</span>\r\n                Price <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\r\n                Open <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\r\n                High <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>\r\n                Low <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>\r\n                UpDown <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\r\n                UpDownRate <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>\r\n                ExchangeRatio <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>\r\n            <span class="token punctuation">}</span>\r\n    <span class="token keyword">with</span>\r\n        <span class="token operator">|</span> _ <span class="token operator">-></span> None</code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里 parse 本身是一个极容易发生错误的过程，返回结果不对，或者返回结果不规范都有可能导致失败，由于我不关心错误原因，所以只要错误返回 None 就可以了，try 里面只关心正常的逻辑，这样可以让代码更好读一点。"),"\n",t.createElement(a.p,null,"这里面有两个奇怪的符号 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">|></code>'}}),"、 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">>></code>'}}),"，它们本质上都是函数，",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">|></code>'}})," 的定义是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">( |> ): 'T1 -> ('T1 -> 'U) -> 'U</code>"}}),"，即将左侧的参数 apply 到右侧的函数中，返回其结果，类似于一个管道，将数据流处理通过一个个函数串联起来，基本上是 fsharp 中最常见的符号了。",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">>></code>'}})," 的定义是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">( >> ) : ('T1 -> 'T2) -> ('T2 -> 'T3) -> 'T1 -> 'T3</code>"}}),"，即 compose 函数，将两个函数组装成一个函数。"),"\n",t.createElement(a.p,null,"还有一个比较 tricky 的事实是，fsharp 去处理这样的中缀符号的结合性的时候，是通过符号的形状来决定的，而不是像 Haskell 那样去显式的声明其结合性和优先级。"),"\n",t.createElement(a.p,null,"有了这些方法之后，主要功能就基本上完成了。最后来更改 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main</code>'}})," 函数。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">EntryPoint</span><span class="token punctuation">>]</span></span>\r\n<span class="token keyword">let</span> main argv <span class="token operator">=</span>\r\n    <span class="token keyword">let</span> stocks <span class="token operator">=</span> <span class="token punctuation">[</span>\r\n        <span class="token punctuation">{</span>\r\n            Name <span class="token operator">=</span> <span class="token string">"MSFT"</span><span class="token punctuation">;</span>\r\n            Code <span class="token operator">=</span> NSDQ <span class="token punctuation">(</span>Code <span class="token string">"MSFT"</span><span class="token punctuation">)</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">]</span>\r\n\r\n    stocks\r\n    <span class="token operator">|></span> Seq<span class="token punctuation">.</span>map getStockData\r\n    <span class="token operator">|></span> Async<span class="token punctuation">.</span>Parallel\r\n    <span class="token operator">|></span> Async<span class="token punctuation">.</span>RunSynchronously\r\n    <span class="token operator">|></span> Seq<span class="token punctuation">.</span>iter\r\n        <span class="token punctuation">(</span><span class="token keyword">fun</span> result <span class="token operator">-></span>\r\n            <span class="token keyword">match</span> result <span class="token keyword">with</span>\r\n            <span class="token operator">|</span> result <span class="token keyword">when</span> result<span class="token punctuation">.</span>Data <span class="token operator">=</span> None <span class="token operator">-></span> printfn <span class="token string">"|%-20s|%10s|%10s|%10s|%10s|%10s|%10s|"</span> result<span class="token punctuation">.</span>Stock<span class="token punctuation">.</span>Name <span class="token string">"_"</span> <span class="token string">"_"</span> <span class="token string">"_"</span> <span class="token string">"_"</span> <span class="token string">"_"</span> <span class="token string">"_"</span>\r\n            <span class="token operator">|</span> <span class="token punctuation">{</span> StockResult<span class="token punctuation">.</span>Stock <span class="token operator">=</span> stock<span class="token punctuation">;</span> StockResult<span class="token punctuation">.</span>Data <span class="token operator">=</span> Some data <span class="token punctuation">}</span> <span class="token operator">-></span>\r\n                printfn <span class="token string">"|%-20s|%10.2f|%10.2f|%10.2f|%10.2f|%10.2f|%10.2f%%|"</span> stock<span class="token punctuation">.</span>Name data<span class="token punctuation">.</span>Price data<span class="token punctuation">.</span>Open data<span class="token punctuation">.</span>Low data<span class="token punctuation">.</span>High data<span class="token punctuation">.</span>UpDown data<span class="token punctuation">.</span>UpDownRate\r\n            <span class="token operator">|</span> _ <span class="token operator">-></span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\r\n        <span class="token punctuation">)</span>\r\n    <span class="token number">0</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"这里有使用 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">printfn</code>'}})," 将最后拿到的结果打印成表格呈现到终端。"),"\n",t.createElement(a.h3,null,"扩展应用"),"\n",t.createElement(a.p,null,"为了让代码更灵活，这里把 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">stocks</code>'}})," 放到一个外部 json 文件中，通过命令行参数进行捕获。这里我用到的是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FSharp.Json</code>'}})," 这个库。"),"\n",t.createElement(a.p,null,"首先需要给最初定义的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StockCode</code>'}})," 和 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Stock</code>'}})," 类型加一些辅助的 attribute。这里涉及到一个 union type 的映射问题，当然，这里的代码是非常直白的。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token keyword">open</span> FSharp<span class="token punctuation">.</span>Json\r\n\r\n<span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">JsonUnion</span><span class="token annotation-content"><span class="token punctuation">(</span>Mode<span class="token operator">=</span>UnionMode<span class="token punctuation">.</span>CaseKeyAsFieldValue<span class="token punctuation">,</span> CaseKeyField<span class="token operator">=</span><span class="token string">"type"</span><span class="token punctuation">,</span> CaseValueField<span class="token operator">=</span><span class="token string">"code"</span><span class="token punctuation">)</span></span><span class="token punctuation">>]</span></span>\r\n<span class="token keyword">type</span> <span class="token class-name">StockCode</span> <span class="token operator">=</span>\r\n    <span class="token operator">|</span> SH <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> SZ <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> HK <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n    <span class="token operator">|</span> NSDQ <span class="token keyword">of</span> <span class="token class-name">Code</span>\r\n\r\n<span class="token keyword">type</span> <span class="token class-name">Stock</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\r\n    <span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">JsonField</span><span class="token annotation-content"><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span></span><span class="token punctuation">>]</span></span>\r\n    Name<span class="token punctuation">:</span> <span class="token class-name">string</span>\r\n    <span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">JsonField</span><span class="token annotation-content"><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span></span><span class="token punctuation">>]</span></span>\r\n    Code<span class="token punctuation">:</span> <span class="token class-name">StockCode</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"然后是更改我们的 main 函数。通过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">argv</code>'}})," 传入 filename，再通过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">File</code>'}})," 把内容读取到程序中，最后通过 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FSharp.Json</code>'}})," deserialize 成我们需要的结构，其他统统保持不变。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="fsharp"><pre class="language-fsharp"><code class="language-fsharp"><span class="token annotation"><span class="token punctuation">[&lt;</span><span class="token class-name">EntryPoint</span><span class="token punctuation">>]</span></span>\r\n<span class="token keyword">let</span> main argv <span class="token operator">=</span>\r\n    <span class="token keyword">let</span> filename <span class="token operator">=</span> argv<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\r\n    <span class="token keyword">let</span> content <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>\r\n    <span class="token keyword">let</span> stocks <span class="token operator">=</span> Json<span class="token punctuation">.</span>deserialize<span class="token operator">&lt;</span>Stock<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\r\n\r\n    <span class="token comment">// ...</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"下面是 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">stocks.json</code>'}})," 文件的一个示例。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">[</span>\r\n    <span class="token punctuation">{</span>\r\n        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"MSFT"</span><span class="token punctuation">,</span>\r\n        <span class="token property">"code"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\r\n            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"NSDQ"</span><span class="token punctuation">,</span>\r\n            <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"MSFT"</span>\r\n        <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span>\r\n<span class="token punctuation">]</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"以上，就是整个应用的主要实现了，当然为了节省篇幅，中间省去了一些细枝末节。"),"\n",t.createElement(a.p,null,"完整的代码可以去访问我的 ",t.createElement(a.a,{href:"https://github.com/nodew/TStock"},"Github")," 查看。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=s(1915),c=s.n(l),r=s(4408),u=s(9199),k=s.n(u),i=s(6411),d=s.n(i),g=s(3561),m=s(3945),h=s(9549);k().extend(d());const y=n=>{var a;let{data:{mdx:s},children:e}=n;return null===s?null:t.createElement(g.Z,null,t.createElement("div",{className:"max-w-5xl mx-auto"},t.createElement(m.h,{title:s.frontmatter.title||"",description:s.frontmatter.excerpt||"",type:"article",extras:[{name:"keywords",content:s.frontmatter.keywords.join(",")}]}),t.createElement("div",{className:"prose xl:prose-xl dark:prose-dark dark:xl:prose-dark-xl max-w-none"},t.createElement("h1",{className:"mb-0 xl:mb-2"},null===(a=s.frontmatter)||void 0===a?void 0:a.title),t.createElement("ul",{className:"list-none flex flex-wrap p-0 xl:p-0 my-0 xl:my-0"},s.frontmatter.tags.map((n=>t.createElement("li",{key:n,className:"flex-none ml-0 mr-4"},t.createElement(r.rU,{to:"/tags/"+c()(n||"")},t.createElement("div",{className:"flex flex-row items-center"},t.createElement(h.l,null),t.createElement("span",{className:"ml-1"},n))))))),t.createElement("div",{className:"text-gray-400 dark:text-gray-700 italic mb-12"},k()(s.frontmatter.date).format("LL")),e)))};function E(n){return t.createElement(y,n,t.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-template-tsx-content-file-path-d-projects-blog-posts-002-crawling-stock-data-in-fsharp-index-mdx-ee1914c4ed088d01768d.js.map