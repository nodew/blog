{"data":{"markdownRemark":{"id":"69260f54-6707-55a9-b0da-ec3953ae08c3","html":"<p>作为一根韭菜，很重要的当然是盯盘，这时候你是要在上班的时候掏出手机看还是打开网页看？</p>\n<p>作为一根合格的韭菜，答案当然是用命令行了！够低调，同时内容又高度定制化。</p>\n<p>而作为一根在 .NET 的生态里讨饭吃的韭菜，我首选的工具是 F#。</p>\n<p>选 F# 而非 C# 主要是出于以下的一些优势：</p>\n<ul>\n<li>\n<p>F# 是 Functional base 的编程语言，相较于C#，语法更灵活也更简洁。同时 F# 并不如 Haskell 那般 strict，可以使用多范式去构建程序，所以也可以很方便的使用 .NET 上其他的绝大多数 DLL 库，无缝和 C# 进行交互。换言之，.NET 拥有的能力，F# 都可以有。</p>\n</li>\n<li>\n<p>F# 拥有更强大的类型系统。</p>\n</li>\n<li>\n<p>虽然相对于其他 OOP 风格的语言来说，C# 已经有了 LINQ 这样的大杀器，但是 F# 借助 computation expression 的扩展，不但支持类 LINQ 的语法 <a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/query-expressions\">Query Expression</a>，而且更强大，也更易于扩展。</p>\n</li>\n<li>\n<p>同样得益于 computation expression，F# 有更好的异步支持 <a href=\"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/asynchronous-workflows\">Async Workflow</a></p>\n</li>\n</ul>\n<p>简单讲就是 C# 有的 F# 都有，同时 F# 更简洁。</p>\n<p>进入正题，首先，我们需要类型去描述我们的股票</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Code</span> <span class=\"token operator\">=</span> Code <span class=\"token keyword\">of</span> <span class=\"token class-name\">string</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StockCode</span> <span class=\"token operator\">=</span>\n    <span class=\"token operator\">|</span> SH <span class=\"token keyword\">of</span> <span class=\"token class-name\">Code</span>\n    <span class=\"token operator\">|</span> SZ <span class=\"token keyword\">of</span> <span class=\"token class-name\">Code</span>\n    <span class=\"token operator\">|</span> HK <span class=\"token keyword\">of</span> <span class=\"token class-name\">Code</span>\n    <span class=\"token operator\">|</span> NSDQ <span class=\"token keyword\">of</span> <span class=\"token class-name\">Code</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Stock</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    Name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">string</span>\n    Code<span class=\"token punctuation\">:</span> <span class=\"token class-name\">StockCode</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Code</code> 是我们的股票编码，但是 A 股、港股、美股等都有不同情况要处理，如何进行区分？所以我引入了 <code class=\"language-text\">StockCode</code> 的 union type，这样我们就有办法描述更多的股票了。</p>\n<p>如果用 C# 会是什么情况？</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseCode</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">string</span> _code <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Code\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _code<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">Sz</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> code<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _code <span class=\"token operator\">=</span> code\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Code<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SHCode</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BaseCode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">SHCode</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">:</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">string</span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"sh\"</span> <span class=\"token operator\">+</span> Code<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SZCode</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BaseCode</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// blabla</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HKCode</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">BaseCode</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// blabla</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/// blabla</span></code></pre></div>\n<p>接下来就是数据部分了，这部分不是我的重点，很多网站都有股票实时数据，比如新浪股票，都是可以的选择。值得注意的是，这些网站都加了反爬虫的技术，另一方面，股票数据要实时刷新，为了逻辑上统一，股票数据一般都是由异步接口提供，jsonp 或者 json，具体的接口不同的网站不同，需要自己去分析。</p>\n<p>找到接口之后，就可以愉快的拿数据来玩耍了。</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">StockData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    Price<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span>\n    Open<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span>\n    High<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span>\n    Low<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span>\n    UpDown<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span>\n    UpDownRate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span>\n    ExchangeRatio<span class=\"token punctuation\">:</span> <span class=\"token class-name\">float</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StockResult</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    Stock<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Stock</span>\n    Data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">StockData</span> option\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里 <code class=\"language-text\">StockData</code> 定义了我们拿到的数据格式，<code class=\"language-text\">StockResult</code> 将我们的数据和股票信息关联起来，方便后面的处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> getStockData <span class=\"token punctuation\">(</span>stock<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Stock</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token computation-expression keyword\">async</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> code <span class=\"token operator\">=</span> stock<span class=\"token punctuation\">.</span>Code\n        <span class=\"token keyword\">let</span> baseURL <span class=\"token operator\">=</span> sprintf <span class=\"token string\">\"http://%s.%s/%s/quotelist\"</span> <span class=\"token punctuation\">(</span>getHostPrefix code<span class=\"token punctuation\">)</span> baseHost <span class=\"token punctuation\">(</span>getRegion code<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> sprintf <span class=\"token string\">\"%s?code=%s&amp;column=%s&amp;callback=%s\"</span> baseURL <span class=\"token punctuation\">(</span>getCodeString code<span class=\"token punctuation\">)</span> column callback\n        <span class=\"token keyword\">let!</span> resp <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">.</span>AsyncRequest url\n        <span class=\"token keyword\">if</span> resp<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">></span> <span class=\"token number\">300</span> <span class=\"token keyword\">then</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> Stock <span class=\"token operator\">=</span> stock<span class=\"token punctuation\">;</span> Data <span class=\"token operator\">=</span> None <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n            <span class=\"token keyword\">let</span> stockData <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|></span> parseData code\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> Stock <span class=\"token operator\">=</span> stock<span class=\"token punctuation\">;</span> Data <span class=\"token operator\">=</span> stockData <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的逻辑很简单，就是拿到传入一只股票，根据股票的 code 信息拼出完整 url，再通过一个异步请求去取数据。这里的异步请求本身可能因为各种原因失败，所以这里的 Data 是一个 <code class=\"language-text\">Option</code> 类型的结果。</p>\n<p>我这里取的是一个 jsonp 的请求，不能直接 deserialize 成一个对象，所以用了一个额外的 parseData 方法来处理数据</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> parseData code <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">try</span>\n        <span class=\"token keyword\">let</span> valuePart <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">let</span> unit <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> code <span class=\"token keyword\">with</span>\n                    <span class=\"token operator\">|</span> HK _ <span class=\"token operator\">-></span> <span class=\"token number\">1000.0</span>\n                    <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> <span class=\"token number\">100.0</span>\n        valuePart<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> valuePart<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> Seq<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">(</span>float <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">/</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">|></span> Seq<span class=\"token punctuation\">.</span>toArray\n        <span class=\"token operator\">|></span> <span class=\"token keyword\">fun</span> s <span class=\"token operator\">-></span>\n            <span class=\"token computation-expression keyword\">Some</span> <span class=\"token punctuation\">{</span>\n                Price <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n                Open <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                High <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n                Low <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n                UpDown <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n                UpDownRate <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n                ExchangeRatio <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">with</span>\n        <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> None</code></pre></div>\n<p>这里 parse 本身是一个极容易发生错误的过程，返回结果不对，或者返回结果不规范都有可能导致失败，由于我不关心错误原因，所以只要错误返回 None 就可以了，try 里面只关心正常处理的逻辑，可以让代码更好读一点。</p>\n<p>这里面有两个奇怪的符号 <code class=\"language-text\">|&gt;</code>、 <code class=\"language-text\">&gt;&gt;</code>，它们本质上都是函数，<code class=\"language-text\">|&gt;</code> 的定义是 <code class=\"language-text\">( |&gt; ): &#39;T1 -&gt; (&#39;T1 -&gt; &#39;U) -&gt; &#39;U</code>，即将左侧的参数 apply 到右侧的函数中，返回其结果，类似于一个管道，将数据流处理通过一个个函数串联起来，基本上是 fsharp 中最常见的符号了。<code class=\"language-text\">&gt;&gt;</code> 的定义是 <code class=\"language-text\">( &gt;&gt; ) : (&#39;T1 -&gt; &#39;T2) -&gt; (&#39;T2 -&gt; &#39;T3) -&gt; &#39;T1 -&gt; &#39;T3</code>，即 compose 函数，将两个函数组装成一个函数。</p>\n<p>还有一个比较 tricky 的事实是，fsharp 去处理这样的中缀符号的结合性的时候，是通过符号的形状来决定的，而不是像 Haskell 那样去显式的声明其结合性和优先级。</p>\n<p>有了这些方法之后，主要功能就基本上完成了。最好我们需要一个 <code class=\"language-text\">main</code> 方法指定程序的 entry point。</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token annotation\"><span class=\"token punctuation\">[&lt;</span><span class=\"token class-name\">EntryPoint</span><span class=\"token punctuation\">>]</span></span>\n<span class=\"token keyword\">let</span> main argv <span class=\"token operator\">=</span>\n    stocks\n    <span class=\"token operator\">|></span> Seq<span class=\"token punctuation\">.</span>map getStockData\n    <span class=\"token operator\">|></span> Async<span class=\"token punctuation\">.</span>Parallel\n    <span class=\"token operator\">|></span> Async<span class=\"token punctuation\">.</span>RunSynchronously\n    <span class=\"token operator\">|></span> Seq<span class=\"token punctuation\">.</span>iter\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> result <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">match</span> result <span class=\"token keyword\">with</span>\n            <span class=\"token operator\">|</span> result <span class=\"token keyword\">when</span> result<span class=\"token punctuation\">.</span>Data <span class=\"token operator\">=</span> None <span class=\"token operator\">-></span> printfn <span class=\"token string\">\"|%-20s|%10s|%10s|%10s|%10s|%10s|%10s|\"</span> result<span class=\"token punctuation\">.</span>Stock<span class=\"token punctuation\">.</span>Name <span class=\"token string\">\"_\"</span> <span class=\"token string\">\"_\"</span> <span class=\"token string\">\"_\"</span> <span class=\"token string\">\"_\"</span> <span class=\"token string\">\"_\"</span> <span class=\"token string\">\"_\"</span>\n            <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> StockResult<span class=\"token punctuation\">.</span>Stock <span class=\"token operator\">=</span> stock<span class=\"token punctuation\">;</span> StockResult<span class=\"token punctuation\">.</span>Data <span class=\"token operator\">=</span> Some data <span class=\"token punctuation\">}</span> <span class=\"token operator\">-></span>\n                printfn <span class=\"token string\">\"|%-20s|%10.2f|%10.2f|%10.2f|%10.2f|%10.2f|%10.2f%%|\"</span> stock<span class=\"token punctuation\">.</span>Name data<span class=\"token punctuation\">.</span>Price data<span class=\"token punctuation\">.</span>Open data<span class=\"token punctuation\">.</span>Low data<span class=\"token punctuation\">.</span>High data<span class=\"token punctuation\">.</span>UpDown data<span class=\"token punctuation\">.</span>UpDownRate\n            <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token number\">0</span></code></pre></div>\n<p>这里有使用 printfn 将最后拿到的结果打印成表格呈现到终端。</p>\n<p>以上，就是整个应用的主要实现了，当然中间省去了一些辅助方法和参数定义。</p>\n<p>完整的代码可以去访问我的 <a href=\"https://github.com/nodew/TStock\">Github</a>。</p>","fields":{"slug":"/posts/crawling-stock-data-in-fsharp/","tagSlugs":["/tag/fsharp-crawler/"]},"frontmatter":{"date":"2019-07-13","description":"作为一根韭菜，很重要的当然是盯盘，这时候你是要在上班的时候掏出手机看还是打开网页看？作为一根合格的韭菜，答案当然是用命令行了！够低调，同时内容又高度定制化。而作为一根在 .NET 的生态里讨饭吃的韭菜，我首选的工具是 F#。 ","tags":["fsharp, crawler"],"title":"韭菜的专业修养 - 如何在摸鱼的时候盯盘"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/crawling-stock-data-in-fsharp/"}}