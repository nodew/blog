{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/posts/crawling-stock-data-in-fsharp/","categorySlug":"/category/fsharp/"},"frontmatter":{"title":"韭菜的专业修养 - 如何在摸鱼的时候盯盘","date":"2019-07-13","category":"fsharp","description":""}}},{"node":{"fields":{"slug":"/posts/lazy-list-with-generator-and-iterator/","categorySlug":"/category/java-script/"},"frontmatter":{"title":"基于 Generator 和 Iterator 的惰性列表","date":"2018-08-25","category":"JavaScript","description":"在编程深入到一定领域的时候，惰性求值 (Lazy evaluation) 是绕不开的一部分。在现实中，有各种需求需要我们应对，为了防止可能的溢出情况，我们往往要凭借经验预先去定义一个上界或者下届，在绝大多数情况下，我们的操作是预先开辟大块内存以备不时之需，形成有意而为之的资源浪费。这种时候，引入惰性列表，或者惰性求值策略，可以在特定情况下帮我们节省资源开销，简化我们的复杂代码。本文主要讲述如何通过 ES6 的新特性 - Generator 和 Iterator，实现惰性列表功能。"}}},{"node":{"fields":{"slug":"/posts/start-raspberrypi-without-screen/","categorySlug":"/category/raspberrypi/"},"frontmatter":{"title":"树莓派折腾笔记 - 无显示器情况下连接使用树莓派","date":"2018-08-02","category":"raspberrypi","description":"最近倒腾东西，翻出了几年前入手的一个raspberry pi 2代 b+的板子，上面都蒙了一层灰，开机后发现还能用。发挥环保主义的精神，废物再利用起来。本文主要讲笔者怎么在没有显示器、不借助网线直连的情况下通过Wi-Fi连接以及通过串口连接的方式来连接到树莓派的，记录下来一是方便日后折腾，二来是希望能帮助遇到过同样问题的朋友。"}}},{"node":{"fields":{"slug":"/posts/long-tou-ge/","categorySlug":"/category/collection/"},"frontmatter":{"title":"古乐府 - 陇头歌","date":"2018-06-20","category":"collection","description":"陇头流水，流离山下。 "}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"currentPage":0,"postsLimit":4,"postsOffset":0,"prevPagePath":"/","nextPagePath":"/page/1","hasPrevPage":false,"hasNextPage":false}}