(self.webpackChunkblog=self.webpackChunkblog||[]).push([[26],{7484:function(n){n.exports=function(){"use strict";var n=1e3,a=6e4,s=36e5,t="millisecond",e="second",p="minute",o="hour",c="day",l="week",r="month",u="quarter",i="year",k="date",d="Invalid Date",f=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,m=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,h={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(n){var a=["th","st","nd","rd"],s=n%100;return"["+n+(a[(s-20)%10]||a[s]||a[0])+"]"}},g=function(n,a,s){var t=String(n);return!t||t.length>=a?n:""+Array(a+1-t.length).join(s)+n},y={s:g,z:function(n){var a=-n.utcOffset(),s=Math.abs(a),t=Math.floor(s/60),e=s%60;return(a<=0?"+":"-")+g(t,2,"0")+":"+g(e,2,"0")},m:function n(a,s){if(a.date()<s.date())return-n(s,a);var t=12*(s.year()-a.year())+(s.month()-a.month()),e=a.clone().add(t,r),p=s-e<0,o=a.clone().add(t+(p?-1:1),r);return+(-(t+(s-e)/(p?e-o:o-e))||0)},a:function(n){return n<0?Math.ceil(n)||0:Math.floor(n)},p:function(n){return{M:r,y:i,w:l,d:c,D:k,h:o,m:p,s:e,ms:t,Q:u}[n]||String(n||"").toLowerCase().replace(/s$/,"")},u:function(n){return void 0===n}},v="en",b={};b[v]=h;var w=function(n){return n instanceof S},x=function n(a,s,t){var e;if(!a)return v;if("string"==typeof a){var p=a.toLowerCase();b[p]&&(e=p),s&&(b[p]=s,e=p);var o=a.split("-");if(!e&&o.length>1)return n(o[0])}else{var c=a.name;b[c]=a,e=c}return!t&&e&&(v=e),e||!t&&v},E=function(n,a){if(w(n))return n.clone();var s="object"==typeof a?a:{};return s.date=n,s.args=arguments,new S(s)},T=y;T.l=x,T.i=w,T.w=function(n,a){return E(n,{locale:a.$L,utc:a.$u,x:a.$x,$offset:a.$offset})};var S=function(){function h(n){this.$L=x(n.locale,null,!0),this.parse(n)}var g=h.prototype;return g.parse=function(n){this.$d=function(n){var a=n.date,s=n.utc;if(null===a)return new Date(NaN);if(T.u(a))return new Date;if(a instanceof Date)return new Date(a);if("string"==typeof a&&!/Z$/i.test(a)){var t=a.match(f);if(t){var e=t[2]-1||0,p=(t[7]||"0").substring(0,3);return s?new Date(Date.UTC(t[1],e,t[3]||1,t[4]||0,t[5]||0,t[6]||0,p)):new Date(t[1],e,t[3]||1,t[4]||0,t[5]||0,t[6]||0,p)}}return new Date(a)}(n),this.$x=n.x||{},this.init()},g.init=function(){var n=this.$d;this.$y=n.getFullYear(),this.$M=n.getMonth(),this.$D=n.getDate(),this.$W=n.getDay(),this.$H=n.getHours(),this.$m=n.getMinutes(),this.$s=n.getSeconds(),this.$ms=n.getMilliseconds()},g.$utils=function(){return T},g.isValid=function(){return!(this.$d.toString()===d)},g.isSame=function(n,a){var s=E(n);return this.startOf(a)<=s&&s<=this.endOf(a)},g.isAfter=function(n,a){return E(n)<this.startOf(a)},g.isBefore=function(n,a){return this.endOf(a)<E(n)},g.$g=function(n,a,s){return T.u(n)?this[a]:this.set(s,n)},g.unix=function(){return Math.floor(this.valueOf()/1e3)},g.valueOf=function(){return this.$d.getTime()},g.startOf=function(n,a){var s=this,t=!!T.u(a)||a,u=T.p(n),d=function(n,a){var e=T.w(s.$u?Date.UTC(s.$y,a,n):new Date(s.$y,a,n),s);return t?e:e.endOf(c)},f=function(n,a){return T.w(s.toDate()[n].apply(s.toDate("s"),(t?[0,0,0,0]:[23,59,59,999]).slice(a)),s)},m=this.$W,h=this.$M,g=this.$D,y="set"+(this.$u?"UTC":"");switch(u){case i:return t?d(1,0):d(31,11);case r:return t?d(1,h):d(0,h+1);case l:var v=this.$locale().weekStart||0,b=(m<v?m+7:m)-v;return d(t?g-b:g+(6-b),h);case c:case k:return f(y+"Hours",0);case o:return f(y+"Minutes",1);case p:return f(y+"Seconds",2);case e:return f(y+"Milliseconds",3);default:return this.clone()}},g.endOf=function(n){return this.startOf(n,!1)},g.$set=function(n,a){var s,l=T.p(n),u="set"+(this.$u?"UTC":""),d=(s={},s[c]=u+"Date",s[k]=u+"Date",s[r]=u+"Month",s[i]=u+"FullYear",s[o]=u+"Hours",s[p]=u+"Minutes",s[e]=u+"Seconds",s[t]=u+"Milliseconds",s)[l],f=l===c?this.$D+(a-this.$W):a;if(l===r||l===i){var m=this.clone().set(k,1);m.$d[d](f),m.init(),this.$d=m.set(k,Math.min(this.$D,m.daysInMonth())).$d}else d&&this.$d[d](f);return this.init(),this},g.set=function(n,a){return this.clone().$set(n,a)},g.get=function(n){return this[T.p(n)]()},g.add=function(t,u){var k,d=this;t=Number(t);var f=T.p(u),m=function(n){var a=E(d);return T.w(a.date(a.date()+Math.round(n*t)),d)};if(f===r)return this.set(r,this.$M+t);if(f===i)return this.set(i,this.$y+t);if(f===c)return m(1);if(f===l)return m(7);var h=(k={},k[p]=a,k[o]=s,k[e]=n,k)[f]||1,g=this.$d.getTime()+t*h;return T.w(g,this)},g.subtract=function(n,a){return this.add(-1*n,a)},g.format=function(n){var a=this,s=this.$locale();if(!this.isValid())return s.invalidDate||d;var t=n||"YYYY-MM-DDTHH:mm:ssZ",e=T.z(this),p=this.$H,o=this.$m,c=this.$M,l=s.weekdays,r=s.months,u=function(n,s,e,p){return n&&(n[s]||n(a,t))||e[s].slice(0,p)},i=function(n){return T.s(p%12||12,n,"0")},k=s.meridiem||function(n,a,s){var t=n<12?"AM":"PM";return s?t.toLowerCase():t},f={YY:String(this.$y).slice(-2),YYYY:this.$y,M:c+1,MM:T.s(c+1,2,"0"),MMM:u(s.monthsShort,c,r,3),MMMM:u(r,c),D:this.$D,DD:T.s(this.$D,2,"0"),d:String(this.$W),dd:u(s.weekdaysMin,this.$W,l,2),ddd:u(s.weekdaysShort,this.$W,l,3),dddd:l[this.$W],H:String(p),HH:T.s(p,2,"0"),h:i(1),hh:i(2),a:k(p,o,!0),A:k(p,o,!1),m:String(o),mm:T.s(o,2,"0"),s:String(this.$s),ss:T.s(this.$s,2,"0"),SSS:T.s(this.$ms,3,"0"),Z:e};return t.replace(m,(function(n,a){return a||f[n]||e.replace(":","")}))},g.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},g.diff=function(t,k,d){var f,m=T.p(k),h=E(t),g=(h.utcOffset()-this.utcOffset())*a,y=this-h,v=T.m(this,h);return v=(f={},f[i]=v/12,f[r]=v,f[u]=v/3,f[l]=(y-g)/6048e5,f[c]=(y-g)/864e5,f[o]=y/s,f[p]=y/a,f[e]=y/n,f)[m]||y,d?v:T.a(v)},g.daysInMonth=function(){return this.endOf(r).$D},g.$locale=function(){return b[this.$L]},g.locale=function(n,a){if(!n)return this.$L;var s=this.clone(),t=x(n,a,!0);return t&&(s.$L=t),s},g.clone=function(){return T.w(this.$d,this)},g.toDate=function(){return new Date(this.valueOf())},g.toJSON=function(){return this.isValid()?this.toISOString():null},g.toISOString=function(){return this.$d.toISOString()},g.toString=function(){return this.$d.toUTCString()},h}(),M=S.prototype;return E.prototype=M,[["$ms",t],["$s",e],["$m",p],["$H",o],["$W",c],["$M",r],["$y",i],["$D",k]].forEach((function(n){M[n[1]]=function(a){return this.$g(a,n[0],n[1])}})),E.extend=function(n,a){return n.$i||(n(a,S,E),n.$i=!0),E},E.locale=x,E.isDayjs=w,E.unix=function(n){return E(1e3*n)},E.en=b[v],E.Ls=b,E.p={},E}()},6176:function(n){n.exports=function(){"use strict";var n={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(a,s,t){var e=s.prototype,p=e.format;t.en.formats=n,e.format=function(a){void 0===a&&(a="YYYY-MM-DDTHH:mm:ssZ");var s=this.$locale().formats,t=function(a,s){return a.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(a,t,e){var p=e&&e.toUpperCase();return t||s[e]||n[e]||s[p].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(n,a,s){return a||s.slice(1)}))}))}(a,void 0===s?{}:s);return p.call(this,t)}}}()},5058:function(n,a,s){"use strict";s.r(a),s.d(a,{default:function(){return y}});var t=s(1151),e=s(7294);function p(n){const a=Object.assign({h2:"h2",p:"p",span:"span",a:"a",h3:"h3"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.h2,null,"初识 Lazy List"),"\n",e.createElement(a.p,null,"如果有了解过 Haskell 的朋友，对下面的这些表达一定不陌生"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="haskell"><pre class="language-haskell"><code class="language-haskell"><span class="token builtin">repeat</span> <span class="token number">1</span> <span class="token comment">-- => [1, 1, 1, 1, 1,...]</span>\r\n<span class="token builtin">cycle</span> <span class="token string">"abc"</span> <span class="token comment">-- => "abcabcabc..."</span>\r\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">..</span><span class="token punctuation">]</span> <span class="token comment">-- => [1, 3, 5, 7, ...]</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"上面的几个表达式产生的都是无限列表。对于习惯了主流编程语言的朋友可能感到困惑，在有限的内存里面如何能表达无限的概念。主要的原因就是 Haskell 是一门默认采用惰性求值策略的语言，没有用到的部分，在内存里面只是一个表达式，并不会真正的去做计算。"),"\n",e.createElement(a.p,null,"如果只看上面的几个表达式，很多朋友可能会说，也没感觉到有什么神奇的地方，似乎并没有什么作用。我们再看看下面的代码。"),"\n",e.createElement(a.p,null,"Haskell 中的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fibonacci</code>'}})," 数列："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="haskell"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">fibonacci</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token builtin">zipWith</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token hvariable">fibonacci</span> <span class="token punctuation">(</span><span class="token builtin">tail</span> <span class="token hvariable">fibonacci</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"这里 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fibonacci</code>'}})," 本身是一个惰性结构，所以在计算的时候，会先算出列表前面的两个 1，得到 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">1 : 1...</code>'}})," 这样的结构，然后怎么表达 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fibonacci</code>'}})," 的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fib(n) = fib(n - 1) + fib(n - 2)</code>'}})," 特性呢？我们可以注意到，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n - 1</code>'}}),"和 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n - 2</code>'}})," 刚好在数列中相差一位，所以 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">n</code>'}})," 可以看作是该数列错位的相加的结果。"),"\n",e.createElement(a.p,null,"我们再来看一则",e.createElement(a.a,{href:"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"},"筛法求素数"),"。不熟悉筛法的可以先点开 wiki 去看一下该算法的思路。下面这段代码是 Haskell 的一个简单实现。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="haskell"><pre class="language-haskell"><code class="language-haskell"><span class="token hvariable">primes</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token builtin">filter</span> <span class="token hvariable">isPrime</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">..</span><span class="token punctuation">]</span>\r\n  <span class="token keyword">where</span>\r\n    <span class="token hvariable">isPrime</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token builtin">all</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token hvariable">p</span> <span class="token operator">-></span> <span class="token hvariable">x</span> <span class="token operator">`mod`</span> <span class="token hvariable">p</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">takeWhile</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token hvariable">p</span> <span class="token operator">-></span> <span class="token hvariable">p</span> <span class="token operator">*</span> <span class="token hvariable">p</span> <span class="token operator">&lt;=</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token hvariable">primes</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"So, Why Lazy?"),"\n",e.createElement(a.p,null,"在某些不定长度的列表操作上，惰性列表会让代码和结构更灵活。用上面的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">primes</code>'}})," 列表举个例子好了，在传统的 C 语言或者 Java 的实现里面，我们一般要先声明一个最大长度或者一个最大的取值范围，比如 10000 以内的素数。如果后面的计算要用到超过这个范围，我们就不得不重新调用生成函数，重新生成一份更长的列表。这里面的问题是：一、要主动去调用这个工厂函数，二、如果要复用已经计算出来的数据，手动去维护一个 cache 列表，势必增加代码的复杂度。另外一个可能的情况是，我们预先生成了一份很长的列表，后面的计算中只用到了列表头部的一丢丢数据，这也是极大的浪费。"),"\n",e.createElement(a.p,null,"惰性列表的使用增加了我们编程的表达能力，让我们可以更关注数据结构本身的特性，而不是浪费时间在如何去管理堆栈上面。因为，惰性求值特性保证我们在需要一个值的时候才会去计算，所以可以自动地最小化我们的计算量，节约资源。"),"\n",e.createElement(a.p,null,"比如我们可以通过 lazy byteString 去读、写文件，它本身不会把整个文件加载到我们的内存里面，而是按需的读取。有的时候我们读一个大文件，可能只筛选出需要的前几十条数据，却确不得不把几百 M 甚至上 G 的大文件整个的放到内存里面。"),"\n",e.createElement(a.p,null,"这里也找到一篇 14 年的文章 ",e.createElement(a.a,{href:"http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/"},"How to Speed Up Lo-Dash ×100? Introducing Lazy Evaluation"),"，感兴趣的可以点开看看。"),"\n",e.createElement(a.h2,null,"在 JavaScript 中实现 Lazy List"),"\n",e.createElement(a.p,null,"在 JavaScript 有没有惰性结构呢？先看下面这个例子。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">let</span> fetchSomething <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/some/thing\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  fetchSomething <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/some/thing/condition\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\nfetchSomething<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n  <span class="token comment">// TODO</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fetch</code>'}})," 方法本身是立即执行的，如果满足条件，这里的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fetch</code>'}})," 方法会执行两次。这并不是我们期待的行为，这里需要让这个 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fetch</code>'}})," 的动作在我们需要的时候才去执行，而不是声明的时候就开始执行的话，通常的做法是把它改成下面的样子。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">fetchSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/some/thing\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  fetchSomething <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'/some/thing/condition\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\nfetchSomething<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\r\n  <span class="token comment">// TODO</span>\r\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"由此启发，我们大致可以实现如下的结构。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">List<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  head<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span>\r\n  tail<span class="token operator">:</span> List<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> List<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>\r\n\r\n  <span class="token function">constructor</span><span class="token punctuation">(</span>head<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token function-variable function">tail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> List<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">head</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> head<span class="token punctuation">;</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> tail<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">List&lt;T></code>'}})," 本质上是一个单链表，构造函数里面传入的 tail 是一个工厂函数，用来构建新的 List 节点。只有在我们访问到一个节点的时候，才对它的 head 求值，访问它的下一个节点的时候对 tail 求值，不然 head 和 tail 都只是待求值的表达式。"),"\n",e.createElement(a.p,null,"这种方式看起来似乎已经解决了我的问题，但是这种结构在和普通的 Array 做互相转换的时候，存在大量不必要的额外开销。"),"\n",e.createElement(a.p,null,"那 JavaScript 中有没有更天然的结构，可以让我们免于去构造这样一个复杂的对象，简化代码的同时，让我们的代码更具有普适性呢？"),"\n",e.createElement(a.h3,null,"初识 Iterable"),"\n",e.createElement(a.p,null,"ES6 的新特性给了我想要的答案，",e.createElement(a.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols"},"Iteration Protocols"),"。如果嫌 MDN 的描述太长，可以直接看下面等价的类型声明。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">interface</span> <span class="token class-name">Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">interface</span> <span class="token class-name">IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  done<span class="token operator">:</span> Boolean<span class="token punctuation">;</span>\r\n  value<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">interface</span> <span class="token class-name">IterableIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IteratorResult<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"所有实现一个 Iterable 接口的对象都可以通过诸如 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for...of...</code>'}}),"、",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">...itor</code>'}})," 以及 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Array.from</code>'}})," 来访问，当 next 方法的返回值中 done 为 true 时，迭代结束。而且只有我们访问 next 方法时，才会进入下一步迭代，是理想的 Lazy 结构。"),"\n",e.createElement(a.p,null,"这时候我们看一下我们的 fibonacci 该怎么写？"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Fibonacci</span> <span class="token keyword">implements</span> <span class="token class-name">IterableIterator<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">private</span> prev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">private</span> next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">public</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prev<span class="token punctuation">;</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>\r\n    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prev<span class="token punctuation">;</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\r\n      done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\r\n      value<span class="token operator">:</span> current\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n\r\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">const</span> fib <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\nfib<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => { done: false, value: 1 }</span>\r\nfib<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => { done: false, value: 1 }</span>\r\nfib<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => { done: false, value: 2 }</span>\r\n<span class="token comment">// etc</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"到这里，我们已经可以表达一个惰性的无限数列了。但是上面的代码毕竟过于繁琐，好在 ES6 同时给我们提供了 Generator, 可以让我们很方便地书写 IterableItorator，从某种意义上来讲，Generator 可以说是上面代码的语法糖。"),"\n",e.createElement(a.p,null,"使用 Generator，上面的代码可以简化成下面的样子。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> prev<span class="token punctuation">;</span>\r\n    <span class="token keyword">const</span> temp <span class="token operator">=</span> prev<span class="token punctuation">;</span>\r\n    prev <span class="token operator">=</span> next<span class="token punctuation">;</span>\r\n    next <span class="token operator">=</span> temp <span class="token operator">+</span> prev<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">const</span> fib <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n<span class="token comment">// etc</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"这里不再去花段落介绍 Generator 的语法，不了解的同学可以先去阅读下这篇文章 ",e.createElement(a.a,{href:"https://medium.com/dailyjs/a-simple-guide-to-understanding-javascript-es6-generators-d1c350551950"},"A Simple Guide to Understanding Javascript (ES6) Generators"),"。"),"\n",e.createElement(a.h3,null,"定义 Infinite List"),"\n",e.createElement(a.p,null,"接着上面的代码往下写，下面的代码分别实现了文章开头的 repeat, cycle, iterate, range 等方法。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">repeat</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> item<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">cycle</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token operator">...</span>items<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">iterate</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">,</span> initial<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> val <span class="token operator">=</span> initial<span class="token punctuation">;</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> val<span class="token punctuation">;</span>\r\n    val <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">range</span><span class="token punctuation">(</span>start<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> start<span class="token punctuation">;</span>\r\n    start <span class="token operator">+=</span> step<span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"可以看到，代码是非常直观且易于理解的。"),"\n",e.createElement(a.h3,null,"定义 Operator"),"\n",e.createElement(a.p,null,"有了列表之后，我们需要在列表之上进行操作，下面的代码分别实现了 map/filter/take/takeWhile 方法。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">map</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">U</span><span class="token punctuation">,</span> items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> <span class="token function">fn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">filter</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>\r\n  <span class="token function-variable function">predicate</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\r\n  items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>\r\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">yield</span> item<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">take</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\r\n\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> item<span class="token punctuation">;</span>\r\n    i<span class="token operator">++</span><span class="token punctuation">;</span>\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">takeWhile</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>\r\n  <span class="token function-variable function">predicate</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\r\n  items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span>\r\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">yield</span> item<span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\r\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"上面的代码都是比较简单的。比较难一点的是去实现 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zip</code>'}})," 方法，即怎么把两个列表合并成一个？"),"\n",e.createElement(a.p,null,"难点在于接收一个 Iterable 的对象的话，本身并不一定要实现 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">next</code>'}})," 方法的，比如 Array、String 等，同时 Iterable 对象也并不是都可以通过 index 来访问的。此外，如果想先通过 Array.from 变成数组，然后在数组上进行操作，我们会遇到一个情况是我们传入的 Iterable 对象是无限的，如上文的 fibonacci 一样，这种情况下是不能使用 Array.from 的。"),"\n",e.createElement(a.p,null,"这时候我的一个思路是需要想办法把一个 Iterable 的对象提升成为 IterableItorator 对象，然后通过 next 方法，逐一遍历。"),"\n",e.createElement(a.p,null,"How？幸好 Generator 给我们提供了一个 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">yield*</code>'}})," 操作符，可以让我们方便的定义出一个 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lift</code>'}})," 方法。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">lift</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>items<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">yield</span><span class="token operator">*</span> items<span class="token punctuation">;</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"有了这个 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">lift</code>'}})," 方法之后，就可以很方便的书写 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zip</code>'}})," 方法和 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">zipWith</code>'}})," 方法了。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="typescript"><pre class="language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">zip</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>\r\n  seqA<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\r\n  seqB<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span>\r\n<span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> itorA <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>seqA<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> itorB <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>seqB<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> valA <span class="token operator">=</span> itorA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> valB <span class="token operator">=</span> itorB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>valA<span class="token punctuation">.</span>done <span class="token operator">||</span> <span class="token operator">!</span>valB<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> <span class="token punctuation">[</span>valA<span class="token punctuation">.</span>value<span class="token punctuation">,</span> valB<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>\r\n    valA <span class="token operator">=</span> itorA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    valB <span class="token operator">=</span> itorB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token generic-function"><span class="token function">zipWith</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>\r\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">G</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">R</span><span class="token punctuation">,</span>\r\n  seqA<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>\r\n  seqB<span class="token operator">:</span> Iterable<span class="token operator">&lt;</span><span class="token constant">G</span><span class="token operator">></span>\r\n<span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n  <span class="token keyword">const</span> itorA <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>seqA<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">const</span> itorB <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>seqB<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> valA <span class="token operator">=</span> itorA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">let</span> valB <span class="token operator">=</span> itorB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>valA<span class="token punctuation">.</span>done <span class="token operator">||</span> <span class="token operator">!</span>valB<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">yield</span> <span class="token function">fn</span><span class="token punctuation">(</span>valA<span class="token punctuation">.</span>value<span class="token punctuation">,</span> valB<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    valA <span class="token operator">=</span> itorA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n    valB <span class="token operator">=</span> itorB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"更多的方法可以去底部的点开我的 repo，这里就不一一列举了。"),"\n",e.createElement(a.h2,null,"结语"),"\n",e.createElement(a.p,null,"Generator 和 Iterator 是 ES6 带给我们的非常强大的语言层面的能力，它本身的求值可以看作是惰性的。"),"\n",e.createElement(a.p,null,"差不多在 13 年左右，TJ 的 ",e.createElement(a.a,{href:"https://github.com/tj/co"},"co")," 刚出来的时候，其代码的短小精悍可以说是相当惊艳的。然而在我们的使用中，一来受限于浏览器兼容性，二来受限于我们的使用场景，个人认为我们对其特性开发得还远远不够。结合 IO、network，Generator 和 Iterator 还能为我们做更多的事情。"),"\n",e.createElement(a.p,null,"另外，需要特别说明的是，虽然这篇文章通篇是在讲惰性列表，但是惰性列表并不是银弹，相反的，惰性结构的滥用会在程序的执行过程中缓存大量的 thunk，增大在内存上的开销。"),"\n",e.createElement(a.p,null,"完整代码请移步 ",e.createElement(a.a,{href:"https://github.com/nodew/lazyList"},"GitHub"),"。"),"\n",e.createElement(a.p,null,"本文首发于",e.createElement(a.a,{href:"https://tech.youzan.com/lazy-list-with-generator-and-iterator/"},"有赞技术博客"),"。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},c=s(1804),l=s.n(c),r=s(1883),u=s(7484),i=s.n(u),k=s(6176),d=s.n(k),f=s(1689),m=s(507),h=s(2964);i().extend(d());const g=n=>{var a;let{data:{mdx:s},children:t}=n;return null===s?null:e.createElement(f.Z,null,e.createElement("div",{className:"max-w-5xl mx-auto"},e.createElement(m.h,{title:s.frontmatter.title||"",description:s.frontmatter.excerpt||"",type:"article",extras:[{name:"keywords",content:s.frontmatter.keywords.join(",")}]}),e.createElement("div",{className:"prose xl:prose-xl dark:prose-dark dark:xl:prose-dark-xl max-w-none"},e.createElement("h1",{className:"mb-0 xl:mb-2"},null===(a=s.frontmatter)||void 0===a?void 0:a.title),e.createElement("ul",{className:"list-none flex flex-wrap p-0 xl:p-0 my-0 xl:my-0"},s.frontmatter.tags.map((n=>e.createElement("li",{key:n,className:"flex-none ml-0 mr-4"},e.createElement(r.rU,{to:"/tags/"+l()(n||"")},e.createElement("div",{className:"flex flex-row items-center"},e.createElement(h.l,null),e.createElement("span",{className:"ml-1"},n))))))),e.createElement("div",{className:"text-gray-400 dark:text-gray-700 italic mb-12"},i()(s.frontmatter.date).format("LL")),t)))};function y(n){return e.createElement(g,n,e.createElement(o,n))}},2964:function(n,a,s){"use strict";s.d(a,{l:function(){return e}});var t=s(7294);const e=n=>{let{size:a=20}=n;return t.createElement("svg",{width:a,height:a,fill:"currentColor",viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},t.createElement("path",{d:"M19.75 2A2.25 2.25 0 0 1 22 4.25v5.462a3.25 3.25 0 0 1-.952 2.298l-8.5 8.503a3.255 3.255 0 0 1-4.597.001L3.489 16.06a3.25 3.25 0 0 1-.003-4.596l8.5-8.51A3.25 3.25 0 0 1 14.284 2h5.465Zm0 1.5h-5.465c-.465 0-.91.185-1.239.513l-8.512 8.523a1.75 1.75 0 0 0 .015 2.462l4.461 4.454a1.755 1.755 0 0 0 2.477 0l8.5-8.503a1.75 1.75 0 0 0 .513-1.237V4.25a.75.75 0 0 0-.75-.75ZM17 5.502a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"}))}},2705:function(n,a,s){var t=s(5639).Symbol;n.exports=t},9932:function(n){n.exports=function(n,a){for(var s=-1,t=null==n?0:n.length,e=Array(t);++s<t;)e[s]=a(n[s],s,n);return e}},2663:function(n){n.exports=function(n,a,s,t){var e=-1,p=null==n?0:n.length;for(t&&p&&(s=n[++e]);++e<p;)s=a(s,n[e],e,n);return s}},9029:function(n){var a=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;n.exports=function(n){return n.match(a)||[]}},4239:function(n,a,s){var t=s(2705),e=s(9607),p=s(2333),o="[object Null]",c="[object Undefined]",l=t?t.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?c:o:l&&l in Object(n)?e(n):p(n)}},8674:function(n){n.exports=function(n){return function(a){return null==n?void 0:n[a]}}},531:function(n,a,s){var t=s(2705),e=s(9932),p=s(1469),o=s(3448),c=1/0,l=t?t.prototype:void 0,r=l?l.toString:void 0;n.exports=function n(a){if("string"==typeof a)return a;if(p(a))return e(a,n)+"";if(o(a))return r?r.call(a):"";var s=a+"";return"0"==s&&1/a==-c?"-0":s}},5393:function(n,a,s){var t=s(2663),e=s(3816),p=s(8748),o=RegExp("['’]","g");n.exports=function(n){return function(a){return t(p(e(a).replace(o,"")),n,"")}}},9389:function(n,a,s){var t=s(8674)({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"});n.exports=t},1957:function(n,a,s){var t="object"==typeof s.g&&s.g&&s.g.Object===Object&&s.g;n.exports=t},9607:function(n,a,s){var t=s(2705),e=Object.prototype,p=e.hasOwnProperty,o=e.toString,c=t?t.toStringTag:void 0;n.exports=function(n){var a=p.call(n,c),s=n[c];try{n[c]=void 0;var t=!0}catch(l){}var e=o.call(n);return t&&(a?n[c]=s:delete n[c]),e}},3157:function(n){var a=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;n.exports=function(n){return a.test(n)}},2333:function(n){var a=Object.prototype.toString;n.exports=function(n){return a.call(n)}},5639:function(n,a,s){var t=s(1957),e="object"==typeof self&&self&&self.Object===Object&&self,p=t||e||Function("return this")();n.exports=p},2757:function(n){var a="\\ud800-\\udfff",s="\\u2700-\\u27bf",t="a-z\\xdf-\\xf6\\xf8-\\xff",e="A-Z\\xc0-\\xd6\\xd8-\\xde",p="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",o="["+p+"]",c="\\d+",l="["+s+"]",r="["+t+"]",u="[^"+a+p+c+s+t+e+"]",i="(?:\\ud83c[\\udde6-\\uddff]){2}",k="[\\ud800-\\udbff][\\udc00-\\udfff]",d="["+e+"]",f="(?:"+r+"|"+u+")",m="(?:"+d+"|"+u+")",h="(?:['’](?:d|ll|m|re|s|t|ve))?",g="(?:['’](?:D|LL|M|RE|S|T|VE))?",y="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",v="[\\ufe0e\\ufe0f]?",b=v+y+("(?:\\u200d(?:"+["[^"+a+"]",i,k].join("|")+")"+v+y+")*"),w="(?:"+[l,i,k].join("|")+")"+b,x=RegExp([d+"?"+r+"+"+h+"(?="+[o,d,"$"].join("|")+")",m+"+"+g+"(?="+[o,d+f,"$"].join("|")+")",d+"?"+f+"+"+h,d+"+"+g,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",c,w].join("|"),"g");n.exports=function(n){return n.match(x)||[]}},3816:function(n,a,s){var t=s(9389),e=s(9833),p=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,o=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");n.exports=function(n){return(n=e(n))&&n.replace(p,t).replace(o,"")}},1469:function(n){var a=Array.isArray;n.exports=a},7005:function(n){n.exports=function(n){return null!=n&&"object"==typeof n}},3448:function(n,a,s){var t=s(4239),e=s(7005),p="[object Symbol]";n.exports=function(n){return"symbol"==typeof n||e(n)&&t(n)==p}},1804:function(n,a,s){var t=s(5393)((function(n,a,s){return n+(s?"-":"")+a.toLowerCase()}));n.exports=t},9833:function(n,a,s){var t=s(531);n.exports=function(n){return null==n?"":t(n)}},8748:function(n,a,s){var t=s(9029),e=s(3157),p=s(9833),o=s(2757);n.exports=function(n,a,s){return n=p(n),void 0===(a=s?void 0:a)?e(n)?o(n):t(n):n.match(a)||[]}},1151:function(n,a,s){"use strict";s.d(a,{ah:function(){return p}});var t=s(7294);const e=t.createContext({});function p(n){const a=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-templates-post-template-tsx-content-file-path-d-projects-blog-posts-001-lazy-list-with-generator-and-iterator-index-mdx-751375b512cbf9ee950f.js.map