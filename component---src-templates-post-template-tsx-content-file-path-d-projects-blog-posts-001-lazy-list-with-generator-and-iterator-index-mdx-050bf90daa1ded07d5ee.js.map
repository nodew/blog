{"version":3,"file":"component---src-templates-post-template-tsx-content-file-path-d-projects-blog-posts-001-lazy-list-with-generator-and-iterator-index-mdx-050bf90daa1ded07d5ee.js","mappings":"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","sources":["webpack://blog/./posts/001-lazy-list-with-generator-and-iterator/index.mdx","webpack://blog/./src/templates/post-template.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    span: \"span\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"初识 Lazy List\"), \"\\n\", React.createElement(_components.p, null, \"如果有了解过 Haskell 的朋友，对下面的这些表达一定不陌生\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"haskell\\\"><pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token builtin\\\">repeat</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token comment\\\">-- => [1, 1, 1, 1, 1,...]</span>\\r\\n<span class=\\\"token builtin\\\">cycle</span> <span class=\\\"token string\\\">\\\"abc\\\"</span> <span class=\\\"token comment\\\">-- => \\\"abcabcabc...\\\"</span>\\r\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">-- => [1, 3, 5, 7, ...]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上面的几个表达式产生的都是无限列表。对于习惯了主流编程语言的朋友可能感到困惑，在有限的内存里面如何能表达无限的概念。主要的原因就是 Haskell 是一门默认采用惰性求值策略的语言，没有用到的部分，在内存里面只是一个表达式，并不会真正的去做计算。\"), \"\\n\", React.createElement(_components.p, null, \"如果只看上面的几个表达式，很多朋友可能会说，也没感觉到有什么神奇的地方，似乎并没有什么作用。我们再看看下面的代码。\"), \"\\n\", React.createElement(_components.p, null, \"Haskell 中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fibonacci</code>\"\n    }\n  }), \" 数列：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"haskell\\\"><pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">fibonacci</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">zipWith</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">+</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">fibonacci</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">tail</span> <span class=\\\"token hvariable\\\">fibonacci</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这里 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fibonacci</code>\"\n    }\n  }), \" 本身是一个惰性结构，所以在计算的时候，会先算出列表前面的两个 1，得到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1 : 1...</code>\"\n    }\n  }), \" 这样的结构，然后怎么表达 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fibonacci</code>\"\n    }\n  }), \" 的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fib(n) = fib(n - 1) + fib(n - 2)</code>\"\n    }\n  }), \" 特性呢？我们可以注意到，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">n - 1</code>\"\n    }\n  }), \"和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">n - 2</code>\"\n    }\n  }), \" 刚好在数列中相差一位，所以 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">n</code>\"\n    }\n  }), \" 可以看作是该数列错位的相加的结果。\"), \"\\n\", React.createElement(_components.p, null, \"我们再来看一则\", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\"\n  }, \"筛法求素数\"), \"。不熟悉筛法的可以先点开 wiki 去看一下该算法的思路。下面这段代码是 Haskell 的一个简单实现。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"haskell\\\"><pre class=\\\"language-haskell\\\"><code class=\\\"language-haskell\\\"><span class=\\\"token hvariable\\\">primes</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">filter</span> <span class=\\\"token hvariable\\\">isPrime</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token operator\\\">..</span><span class=\\\"token punctuation\\\">]</span>\\r\\n  <span class=\\\"token keyword\\\">where</span>\\r\\n    <span class=\\\"token hvariable\\\">isPrime</span> <span class=\\\"token hvariable\\\">x</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">all</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">\\\\</span><span class=\\\"token hvariable\\\">p</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token hvariable\\\">x</span> <span class=\\\"token operator\\\">`mod`</span> <span class=\\\"token hvariable\\\">p</span> <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token builtin\\\">takeWhile</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">\\\\</span><span class=\\\"token hvariable\\\">p</span> <span class=\\\"token operator\\\">-></span> <span class=\\\"token hvariable\\\">p</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token hvariable\\\">p</span> <span class=\\\"token operator\\\">&lt;=</span> <span class=\\\"token hvariable\\\">x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token hvariable\\\">primes</span><span class=\\\"token punctuation\\\">)</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"So, Why Lazy?\"), \"\\n\", React.createElement(_components.p, null, \"在某些不定长度的列表操作上，惰性列表会让代码和结构更灵活。用上面的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">primes</code>\"\n    }\n  }), \" 列表举个例子好了，在传统的 C 语言或者 Java 的实现里面，我们一般要先声明一个最大长度或者一个最大的取值范围，比如 10000 以内的素数。如果后面的计算要用到超过这个范围，我们就不得不重新调用生成函数，重新生成一份更长的列表。这里面的问题是：一、要主动去调用这个工厂函数，二、如果要复用已经计算出来的数据，手动去维护一个 cache 列表，势必增加代码的复杂度。另外一个可能的情况是，我们预先生成了一份很长的列表，后面的计算中只用到了列表头部的一丢丢数据，这也是极大的浪费。\"), \"\\n\", React.createElement(_components.p, null, \"惰性列表的使用增加了我们编程的表达能力，让我们可以更关注数据结构本身的特性，而不是浪费时间在如何去管理堆栈上面。因为，惰性求值特性保证我们在需要一个值的时候才会去计算，所以可以自动地最小化我们的计算量，节约资源。\"), \"\\n\", React.createElement(_components.p, null, \"比如我们可以通过 lazy byteString 去读、写文件，它本身不会把整个文件加载到我们的内存里面，而是按需的读取。有的时候我们读一个大文件，可能只筛选出需要的前几十条数据，却确不得不把几百 M 甚至上 G 的大文件整个的放到内存里面。\"), \"\\n\", React.createElement(_components.p, null, \"这里也找到一篇 14 年的文章 \", React.createElement(_components.a, {\n    href: \"http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/\"\n  }, \"How to Speed Up Lo-Dash ×100? Introducing Lazy Evaluation\"), \"，感兴趣的可以点开看看。\"), \"\\n\", React.createElement(_components.h2, null, \"在 JavaScript 中实现 Lazy List\"), \"\\n\", React.createElement(_components.p, null, \"在 JavaScript 有没有惰性结构呢？先看下面这个例子。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">let</span> fetchSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/some/thing'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>condition<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  fetchSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/some/thing/condition'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\nfetchSomething<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token comment\\\">// TODO</span>\\r\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fetch</code>\"\n    }\n  }), \" 方法本身是立即执行的，如果满足条件，这里的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fetch</code>\"\n    }\n  }), \" 方法会执行两次。这并不是我们期待的行为，这里需要让这个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fetch</code>\"\n    }\n  }), \" 的动作在我们需要的时候才去执行，而不是声明的时候就开始执行的话，通常的做法是把它改成下面的样子。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">fetchSomething</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/some/thing'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>condition<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  fetchSomething <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fetch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'/some/thing/condition'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\nfetchSomething<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token comment\\\">// TODO</span>\\r\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"由此启发，我们大致可以实现如下的结构。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">List<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  head<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token constant\\\">T</span>\\r\\n  tail<span class=\\\"token operator\\\">:</span> List<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> List<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span>\\r\\n\\r\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>head<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function-variable function\\\">tail</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> List<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">head</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> head<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>tail <span class=\\\"token operator\\\">=</span> tail<span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">List&lt;T></code>\"\n    }\n  }), \" 本质上是一个单链表，构造函数里面传入的 tail 是一个工厂函数，用来构建新的 List 节点。只有在我们访问到一个节点的时候，才对它的 head 求值，访问它的下一个节点的时候对 tail 求值，不然 head 和 tail 都只是待求值的表达式。\"), \"\\n\", React.createElement(_components.p, null, \"这种方式看起来似乎已经解决了我的问题，但是这种结构在和普通的 Array 做互相转换的时候，存在大量不必要的额外开销。\"), \"\\n\", React.createElement(_components.p, null, \"那 JavaScript 中有没有更天然的结构，可以让我们免于去构造这样一个复杂的对象，简化代码的同时，让我们的代码更具有普适性呢？\"), \"\\n\", React.createElement(_components.h3, null, \"初识 Iterable\"), \"\\n\", React.createElement(_components.p, null, \"ES6 的新特性给了我想要的答案，\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\"\n  }, \"Iteration Protocols\"), \"。如果嫌 MDN 的描述太长，可以直接看下面等价的类型声明。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token punctuation\\\">[</span>Symbol<span class=\\\"token punctuation\\\">.</span>iterator<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Iterator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Iterator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> IteratorResult<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IteratorResult<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  done<span class=\\\"token operator\\\">:</span> Boolean<span class=\\\"token punctuation\\\">;</span>\\r\\n  value<span class=\\\"token operator\\\">?</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IterableIterator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token punctuation\\\">[</span>Symbol<span class=\\\"token punctuation\\\">.</span>iterator<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Iterator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> IteratorResult<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"所有实现一个 Iterable 接口的对象都可以通过诸如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">for...of...</code>\"\n    }\n  }), \"、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">...itor</code>\"\n    }\n  }), \" 以及 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Array.from</code>\"\n    }\n  }), \" 来访问，当 next 方法的返回值中 done 为 true 时，迭代结束。而且只有我们访问 next 方法时，才会进入下一步迭代，是理想的 Lazy 结构。\"), \"\\n\", React.createElement(_components.p, null, \"这时候我们看一下我们的 fibonacci 该怎么写？\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Fibonacci</span> <span class=\\\"token keyword\\\">implements</span> <span class=\\\"token class-name\\\">IterableIterator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token operator\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">private</span> prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">private</span> next <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n  <span class=\\\"token keyword\\\">public</span> <span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">let</span> current <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>prev<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>next<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>next <span class=\\\"token operator\\\">=</span> current <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>prev<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n      done<span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\r\\n      value<span class=\\\"token operator\\\">:</span> current\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n  <span class=\\\"token punctuation\\\">[</span>Symbol<span class=\\\"token punctuation\\\">.</span>iterator<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">const</span> fib <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Fibonacci</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\nfib<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => { done: false, value: 1 }</span>\\r\\nfib<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => { done: false, value: 1 }</span>\\r\\nfib<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\">// => { done: false, value: 2 }</span>\\r\\n<span class=\\\"token comment\\\">// etc</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"到这里，我们已经可以表达一个惰性的无限数列了。但是上面的代码毕竟过于繁琐，好在 ES6 同时给我们提供了 Generator, 可以让我们很方便地书写 IterableItorator，从某种意义上来讲，Generator 可以说是上面代码的语法糖。\"), \"\\n\", React.createElement(_components.p, null, \"使用 Generator，上面的代码可以简化成下面的样子。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">fibonacci</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">let</span> prev <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">let</span> next <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span> prev<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">const</span> temp <span class=\\\"token operator\\\">=</span> prev<span class=\\\"token punctuation\\\">;</span>\\r\\n    prev <span class=\\\"token operator\\\">=</span> next<span class=\\\"token punctuation\\\">;</span>\\r\\n    next <span class=\\\"token operator\\\">=</span> temp <span class=\\\"token operator\\\">+</span> prev<span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">const</span> fib <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fibonacci</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token comment\\\">// etc</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这里不再去花段落介绍 Generator 的语法，不了解的同学可以先去阅读下这篇文章 \", React.createElement(_components.a, {\n    href: \"https://medium.com/dailyjs/a-simple-guide-to-understanding-javascript-es6-generators-d1c350551950\"\n  }, \"A Simple Guide to Understanding Javascript (ES6) Generators\"), \"。\"), \"\\n\", React.createElement(_components.h3, null, \"定义 Infinite List\"), \"\\n\", React.createElement(_components.p, null, \"接着上面的代码往下写，下面的代码分别实现了文章开头的 repeat, cycle, iterate, range 等方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">repeat</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span> item<span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">cycle</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>items<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>items<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">iterate</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function-variable function\\\">fn</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> initial<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">let</span> val <span class=\\\"token operator\\\">=</span> initial<span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span> val<span class=\\\"token punctuation\\\">;</span>\\r\\n    val <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">range</span><span class=\\\"token punctuation\\\">(</span>start<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> end <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">Infinity</span><span class=\\\"token punctuation\\\">,</span> step <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>start <span class=\\\"token operator\\\">&lt;=</span> end<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span> start<span class=\\\"token punctuation\\\">;</span>\\r\\n    start <span class=\\\"token operator\\\">+=</span> step<span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"可以看到，代码是非常直观且易于理解的。\"), \"\\n\", React.createElement(_components.h3, null, \"定义 Operator\"), \"\\n\", React.createElement(_components.p, null, \"有了列表之后，我们需要在列表之上进行操作，下面的代码分别实现了 map/filter/take/takeWhile 方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">map</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">U</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function-variable function\\\">fn</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token constant\\\">U</span><span class=\\\"token punctuation\\\">,</span> items<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token keyword\\\">of</span> items<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">filter</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\r\\n  <span class=\\\"token function-variable function\\\">predicate</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">boolean</span><span class=\\\"token punctuation\\\">,</span>\\r\\n  items<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span>\\r\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token keyword\\\">of</span> items<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">predicate</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n      <span class=\\\"token keyword\\\">yield</span> item<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">take</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>n<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> items<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>n <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\r\\n\\r\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token keyword\\\">of</span> items<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span> item<span class=\\\"token punctuation\\\">;</span>\\r\\n    i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">>=</span> n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">takeWhile</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\r\\n  <span class=\\\"token function-variable function\\\">predicate</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">boolean</span><span class=\\\"token punctuation\\\">,</span>\\r\\n  items<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span>\\r\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> item <span class=\\\"token keyword\\\">of</span> items<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">predicate</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n      <span class=\\\"token keyword\\\">yield</span> item<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n      <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上面的代码都是比较简单的。比较难一点的是去实现 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">zip</code>\"\n    }\n  }), \" 方法，即怎么把两个列表合并成一个？\"), \"\\n\", React.createElement(_components.p, null, \"难点在于接收一个 Iterable 的对象的话，本身并不一定要实现 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">next</code>\"\n    }\n  }), \" 方法的，比如 Array、String 等，同时 Iterable 对象也并不是都可以通过 index 来访问的。此外，如果想先通过 Array.from 变成数组，然后在数组上进行操作，我们会遇到一个情况是我们传入的 Iterable 对象是无限的，如上文的 fibonacci 一样，这种情况下是不能使用 Array.from 的。\"), \"\\n\", React.createElement(_components.p, null, \"这时候我的一个思路是需要想办法把一个 Iterable 的对象提升成为 IterableItorator 对象，然后通过 next 方法，逐一遍历。\"), \"\\n\", React.createElement(_components.p, null, \"How？幸好 Generator 给我们提供了一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">yield*</code>\"\n    }\n  }), \" 操作符，可以让我们方便的定义出一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lift</code>\"\n    }\n  }), \" 方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">lift</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>items<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> IterableIterator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">yield</span><span class=\\\"token operator\\\">*</span> items<span class=\\\"token punctuation\\\">;</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"有了这个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lift</code>\"\n    }\n  }), \" 方法之后，就可以很方便的书写 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">zip</code>\"\n    }\n  }), \" 方法和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">zipWith</code>\"\n    }\n  }), \" 方法了。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"typescript\\\"><pre class=\\\"language-typescript\\\"><code class=\\\"language-typescript\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">zip</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">G</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\r\\n  seqA<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\r\\n  seqB<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">G</span><span class=\\\"token operator\\\">></span>\\r\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> IterableIterator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">G</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">const</span> itorA <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lift</span><span class=\\\"token punctuation\\\">(</span>seqA<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">const</span> itorB <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lift</span><span class=\\\"token punctuation\\\">(</span>seqB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">let</span> valA <span class=\\\"token operator\\\">=</span> itorA<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">let</span> valB <span class=\\\"token operator\\\">=</span> itorB<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>valA<span class=\\\"token punctuation\\\">.</span>done <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>valB<span class=\\\"token punctuation\\\">.</span>done<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token punctuation\\\">[</span>valA<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">,</span> valB<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    valA <span class=\\\"token operator\\\">=</span> itorA<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    valB <span class=\\\"token operator\\\">=</span> itorB<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">zipWith</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">G</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token constant\\\">R</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span>\\r\\n  <span class=\\\"token function-variable function\\\">fn</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">G</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token constant\\\">R</span><span class=\\\"token punctuation\\\">,</span>\\r\\n  seqA<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">T</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span>\\r\\n  seqB<span class=\\\"token operator\\\">:</span> Iterable<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">G</span><span class=\\\"token operator\\\">></span>\\r\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> IterableIterator<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token constant\\\">R</span><span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n  <span class=\\\"token keyword\\\">const</span> itorA <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lift</span><span class=\\\"token punctuation\\\">(</span>seqA<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">const</span> itorB <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">lift</span><span class=\\\"token punctuation\\\">(</span>seqB<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">let</span> valA <span class=\\\"token operator\\\">=</span> itorA<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">let</span> valB <span class=\\\"token operator\\\">=</span> itorB<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>valA<span class=\\\"token punctuation\\\">.</span>done <span class=\\\"token operator\\\">||</span> <span class=\\\"token operator\\\">!</span>valB<span class=\\\"token punctuation\\\">.</span>done<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span>valA<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">,</span> valB<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    valA <span class=\\\"token operator\\\">=</span> itorA<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n    valB <span class=\\\"token operator\\\">=</span> itorB<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">next</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\r\\n  <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"更多的方法可以去底部的点开我的 repo，这里就不一一列举了。\"), \"\\n\", React.createElement(_components.h2, null, \"结语\"), \"\\n\", React.createElement(_components.p, null, \"Generator 和 Iterator 是 ES6 带给我们的非常强大的语言层面的能力，它本身的求值可以看作是惰性的。\"), \"\\n\", React.createElement(_components.p, null, \"差不多在 13 年左右，TJ 的 \", React.createElement(_components.a, {\n    href: \"https://github.com/tj/co\"\n  }, \"co\"), \" 刚出来的时候，其代码的短小精悍可以说是相当惊艳的。然而在我们的使用中，一来受限于浏览器兼容性，二来受限于我们的使用场景，个人认为我们对其特性开发得还远远不够。结合 IO、network，Generator 和 Iterator 还能为我们做更多的事情。\"), \"\\n\", React.createElement(_components.p, null, \"另外，需要特别说明的是，虽然这篇文章通篇是在讲惰性列表，但是惰性列表并不是银弹，相反的，惰性结构的滥用会在程序的执行过程中缓存大量的 thunk，增大在内存上的开销。\"), \"\\n\", React.createElement(_components.p, null, \"完整代码请移步 \", React.createElement(_components.a, {\n    href: \"https://github.com/nodew/lazyList\"\n  }, \"GitHub\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"本文首发于\", React.createElement(_components.a, {\n    href: \"https://tech.youzan.com/lazy-list-with-generator-and-iterator/\"\n  }, \"有赞技术博客\"), \"。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"D:/projects/blog/posts/001-lazy-list-with-generator-and-iterator/index.mdx\";\nimport _kebabCase from \"lodash/kebabCase\";\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport Layout from \"../components/Layout\";\nimport {Meta} from \"../components/Meta\";\nimport {TagIcon} from \"../components/TagIcon\";\ndayjs.extend(localizedFormat);\nconst PostTemplate = _ref => {\n  var _mdx$frontmatter;\n  let {data: {mdx}, children} = _ref;\n  if (mdx === null) {\n    return null;\n  }\n  return React.createElement(Layout, null, React.createElement(\"div\", {\n    className: \"max-w-5xl mx-auto\"\n  }, React.createElement(Meta, {\n    title: mdx.frontmatter.title || \"\",\n    description: mdx.frontmatter.excerpt || \"\",\n    type: \"article\",\n    extras: [{\n      name: \"keywords\",\n      content: mdx.frontmatter.keywords.join(\",\")\n    }]\n  }), React.createElement(\"div\", {\n    className: \"prose xl:prose-xl dark:prose-dark dark:xl:prose-dark-xl max-w-none\"\n  }, React.createElement(\"h1\", {\n    className: \"mb-0 xl:mb-2\"\n  }, (_mdx$frontmatter = mdx.frontmatter) === null || _mdx$frontmatter === void 0 ? void 0 : _mdx$frontmatter.title), React.createElement(\"ul\", {\n    className: \"list-none flex flex-wrap p-0 xl:p-0 my-0 xl:my-0\"\n  }, mdx.frontmatter.tags.map(tag => React.createElement(\"li\", {\n    key: tag,\n    className: \"flex-none ml-0 mr-4\"\n  }, React.createElement(Link, {\n    to: \"/tags/\" + _kebabCase(tag || \"\")\n  }, React.createElement(\"div\", {\n    className: \"flex flex-row items-center\"\n  }, React.createElement(TagIcon, null), React.createElement(\"span\", {\n    className: \"ml-1\"\n  }, tag)))))), React.createElement(\"div\", {\n    className: \"text-gray-400 dark:text-gray-700 italic mb-12\"\n  }, dayjs(mdx.frontmatter.date).format(\"LL\")), children)));\n};\nconst pageQuery = \"1935398499\";\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","span","a","h3","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","dayjs","localizedFormat","PostTemplate","_ref","_mdx$frontmatter","data","mdx","children","Layout","className","Meta","title","frontmatter","description","excerpt","type","extras","name","content","keywords","join","tags","map","tag","key","Link","to","_kebabCase","TagIcon","date","format","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}