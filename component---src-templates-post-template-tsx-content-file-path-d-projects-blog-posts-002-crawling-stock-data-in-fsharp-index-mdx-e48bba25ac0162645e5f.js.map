{"version":3,"file":"component---src-templates-post-template-tsx-content-file-path-d-projects-blog-posts-002-crawling-stock-data-in-fsharp-index-mdx-e48bba25ac0162645e5f.js","mappings":"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","sources":["webpack://blog/./posts/002-crawling-stock-data-in-fsharp/index.mdx","webpack://blog/./src/templates/post-template.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"作为一根韭菜，很重要的当然是盯盘，这时候你是要在上班的时候掏出手机看还是打开网页看？\"), \"\\n\", React.createElement(_components.p, null, \"作为一根合格的韭菜，答案当然是用命令行了！够低调，同时内容又高度定制化。\"), \"\\n\", React.createElement(_components.p, null, \"而作为一根在 .NET 的生态里讨饭吃的韭菜，我首选的工具是 F#。\"), \"\\n\", React.createElement(_components.h3, null, \"为什么选择 FSharp\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"F# 是 Functional base 的编程语言，相较于 C#，语法更灵活也更简洁。同时 F# 并不如 Haskell 那般 strict，可以使用多范式去构建程序，所以也可以很方便的使用 .NET 上其他的绝大多数 DLL 库，无缝和 C# 进行交互。换言之，.NET 拥有的能力，F# 都可以有。\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"相较于 C#，F# 拥有更强大的类型系统。\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"虽然相对于其他 OOP 风格的语言来说，C# 已经有了 LINQ 这样的大杀器，但是 F# 借助 computation expression 的扩展，不但支持类 LINQ 的语法 \", React.createElement(_components.a, {\n    href: \"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/query-expressions\"\n  }, \"Query Expression\"), \"，而且更强大，也更易于扩展。\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"同样得益于 computation expression，F# 有更好的异步支持 \", React.createElement(_components.a, {\n    href: \"https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/asynchronous-workflows\"\n  }, \"Async Workflow\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"简单讲就是 C# 有的 F# 都有，同时 F# 可以更简洁。\"), \"\\n\", React.createElement(_components.h3, null, \"初始化项目\"), \"\\n\", React.createElement(_components.p, null, \"进入正题，首先，需要去创建一个新的 Project。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"powershell\\\"><pre class=\\\"language-powershell\\\"><code class=\\\"language-powershell\\\">dotnet new console <span class=\\\"token operator\\\">-</span>lang F<span class=\\\"token comment\\\"># -o TStock</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这里的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-lang</code>\"\n    }\n  }), \" 指定使用的编程语言是 F#, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-o</code>\"\n    }\n  }), \" 指定了项目目录名称。\"), \"\\n\", React.createElement(_components.p, null, \"然后在生成的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Program.fs</code>\"\n    }\n  }), \" 中可以看到如下代码\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"fsharp\\\"><pre class=\\\"language-fsharp\\\"><code class=\\\"language-fsharp\\\"><span class=\\\"token comment\\\">// Learn more about F# at http://fsharp.org</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">open</span> System\\r\\n\\r\\n<span class=\\\"token annotation\\\"><span class=\\\"token punctuation\\\">[&lt;</span><span class=\\\"token class-name\\\">EntryPoint</span><span class=\\\"token punctuation\\\">>]</span></span>\\r\\n<span class=\\\"token keyword\\\">let</span> main argv <span class=\\\"token operator\\\">=</span>\\r\\n    printfn <span class=\\\"token string\\\">\\\"Hello World from F#!\\\"</span>\\r\\n    <span class=\\\"token number\\\">0</span> <span class=\\\"token comment\\\">// return an integer exit code</span>\\r\\n</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">dotnet run</code>\"\n    }\n  }), \" 执行可以得到输出 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Hello World from F#!</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.h3, null, \"使用 paket 管理依赖\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://fsprojects.github.io/Paket/index.html\"\n  }, \"paket\"), \" 是 F# 社区实现的一款包管理工具，相较于 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nuget</code>\"\n    }\n  }), \" 来说更灵活一些，可以同时用来管理 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nuget</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">github</code>\"\n    }\n  }), \" 上的依赖。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"powershell\\\"><pre class=\\\"language-powershell\\\"><code class=\\\"language-powershell\\\">choco install paket</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"如果没有安装过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">paket</code>\"\n    }\n  }), \"，可以用 \", React.createElement(_components.a, {\n    href: \"https://chocolatey.org/\"\n  }, \"chocolatey\"), \" 方便的安装 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">paket</code>\"\n    }\n  }), \", 安装好之后，需要在项目中初始化 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">paket</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"powershell\\\"><pre class=\\\"language-powershell\\\"><code class=\\\"language-powershell\\\">paket init</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这是时候项目中多出了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.paket</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.paket-files</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">paket.dependencies</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">paket.dependencies</code>\"\n    }\n  }), \" 中写入依赖如下\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">source https://www.nuget.org/api/v2\\r\\n\\r\\nnuget FSharp.Core\\r\\nnuget FSharp.Data\\r\\nnuget FSharp.Json</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.\\\\paket\\\\paket.exe install</code>\"\n    }\n  }), \" 安装依赖。\"), \"\\n\", React.createElement(_components.p, null, \"这时候声明的依赖都安装到了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">packages</code>\"\n    }\n  }), \" 目录下，那么怎么使用呢?\"), \"\\n\", React.createElement(_components.p, null, \"在和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">*.fsproj</code>\"\n    }\n  }), \"同目录的地方创建一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">paket.references</code>\"\n    }\n  }), \" 文件，里面写入这个项目的依赖\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\"><pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">FSharp.Core\\r\\nFSharp.Data\\r\\nFSharp.Json</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这主要是因为考虑到通常一个 solution 下面需要很多个 project 的情况。\"), \"\\n\", React.createElement(_components.p, null, \"再跑一次 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.\\\\paket\\\\paket.exe install</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.paket</code>\"\n    }\n  }), \" 目录下多了一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Paket.Restore.targets</code>\"\n    }\n  }), \" 文件，fsproj 文件中也多出了一行\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"xml\\\"><pre class=\\\"language-xml\\\"><code class=\\\"language-xml\\\">    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Import</span> <span class=\\\"token attr-name\\\">Project</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation attr-equals\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>.paket\\\\Paket.Restore.targets<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token punctuation\\\">/></span></span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"通过这个文件，就可以在项目中引用到安装的依赖了。\"), \"\\n\", React.createElement(_components.h3, null, \"编写代码\"), \"\\n\", React.createElement(_components.p, null, \"先保留 main 函数里面的部分不动，开始代码逻辑部分的处理。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"fsharp\\\"><pre class=\\\"language-fsharp\\\"><code class=\\\"language-fsharp\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Code</span> <span class=\\\"token operator\\\">=</span> Code <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">string</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">StockCode</span> <span class=\\\"token operator\\\">=</span>\\r\\n    <span class=\\\"token operator\\\">|</span> SH <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">Code</span>\\r\\n    <span class=\\\"token operator\\\">|</span> SZ <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">Code</span>\\r\\n    <span class=\\\"token operator\\\">|</span> HK <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">Code</span>\\r\\n    <span class=\\\"token operator\\\">|</span> NSDQ <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">Code</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Stock</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    Name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">string</span>\\r\\n    Code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">StockCode</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Code</code>\"\n    }\n  }), \" 是股票编码，但是 A 股、港股、美股等都有不同情况要处理，如何进行区分？所以我引入了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StockCode</code>\"\n    }\n  }), \" 的 union type，这样就有办法描述更多的股票了。\"), \"\\n\", React.createElement(_components.p, null, \"如果用 C# 会是什么情况？\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"csharp\\\"><pre class=\\\"language-csharp\\\"><code class=\\\"language-csharp\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BaseCode</span>\\r\\n<span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token keyword\\\">private</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> _code <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> Code\\r\\n    <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> _code<span class=\\\"token punctuation\\\">;</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token function\\\">Sz</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\"><span class=\\\"token keyword\\\">string</span></span> code<span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">{</span>\\r\\n        _code <span class=\\\"token operator\\\">=</span> code\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> <span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> Code<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SHCode</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">BaseCode</span></span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token function\\\">SHCode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token named-parameter punctuation\\\">code</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">base</span><span class=\\\"token punctuation\\\">(</span>code<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">override</span> <span class=\\\"token return-type class-name\\\"><span class=\\\"token keyword\\\">string</span></span> <span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"sh\\\"</span> <span class=\\\"token operator\\\">+</span> Code<span class=\\\"token punctuation\\\">;</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SZCode</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">BaseCode</span></span>\\r\\n<span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token comment\\\">/// blabla</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">HKCode</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token type-list\\\"><span class=\\\"token class-name\\\">BaseCode</span></span>\\r\\n<span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token comment\\\">/// blabla</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token comment\\\">/// blabla</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"接下来就是数据部分了，这部分不是我的重点，很多网站都有股票实时数据，比如新浪股票，都是可以的选择。值得注意的是，这些网站都加了反爬虫的技术，另一方面，股票数据要实时刷新，为了逻辑上统一，股票数据一般都是由异步接口提供，jsonp 或者 json，具体的接口不同的网站不同，需要自己去分析。\"), \"\\n\", React.createElement(_components.p, null, \"找到接口之后，就可以愉快的拿数据来玩耍了。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"fsharp\\\"><pre class=\\\"language-fsharp\\\"><code class=\\\"language-fsharp\\\"><span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">StockData</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    Price<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">float</span>\\r\\n    Open<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">float</span>\\r\\n    High<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">float</span>\\r\\n    Low<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">float</span>\\r\\n    UpDown<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">float</span>\\r\\n    UpDownRate<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">float</span>\\r\\n    ExchangeRatio<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">float</span>\\r\\n<span class=\\\"token punctuation\\\">}</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">StockResult</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    Stock<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Stock</span>\\r\\n    Data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">StockData</span> option\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这里 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StockData</code>\"\n    }\n  }), \" 定义了拿到的数据格式，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StockResult</code>\"\n    }\n  }), \" 定义了完整的返回结果，将数据信息和股票信息关联起来，方便后面的处理。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"fsharp\\\"><pre class=\\\"language-fsharp\\\"><code class=\\\"language-fsharp\\\"><span class=\\\"token keyword\\\">let</span> getStockData <span class=\\\"token punctuation\\\">(</span>stock<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Stock</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\r\\n    <span class=\\\"token computation-expression keyword\\\">async</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token keyword\\\">let</span> code <span class=\\\"token operator\\\">=</span> stock<span class=\\\"token punctuation\\\">.</span>Code\\r\\n        <span class=\\\"token keyword\\\">let</span> baseURL <span class=\\\"token operator\\\">=</span> sprintf <span class=\\\"token string\\\">\\\"http://%s.%s/%s/quotelist\\\"</span> <span class=\\\"token punctuation\\\">(</span>getHostPrefix code<span class=\\\"token punctuation\\\">)</span> baseHost <span class=\\\"token punctuation\\\">(</span>getRegion code<span class=\\\"token punctuation\\\">)</span>\\r\\n        <span class=\\\"token keyword\\\">let</span> url <span class=\\\"token operator\\\">=</span> sprintf <span class=\\\"token string\\\">\\\"%s?code=%s&amp;column=%s&amp;callback=%s\\\"</span> baseURL <span class=\\\"token punctuation\\\">(</span>getCodeString code<span class=\\\"token punctuation\\\">)</span> column callback\\r\\n        <span class=\\\"token keyword\\\">let!</span> resp <span class=\\\"token operator\\\">=</span> Http<span class=\\\"token punctuation\\\">.</span>AsyncRequest url\\r\\n        <span class=\\\"token keyword\\\">if</span> resp<span class=\\\"token punctuation\\\">.</span>StatusCode <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">300</span> <span class=\\\"token keyword\\\">then</span>\\r\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> Stock <span class=\\\"token operator\\\">=</span> stock<span class=\\\"token punctuation\\\">;</span> Data <span class=\\\"token operator\\\">=</span> None <span class=\\\"token punctuation\\\">}</span>\\r\\n        <span class=\\\"token keyword\\\">else</span>\\r\\n            <span class=\\\"token keyword\\\">let</span> stockData <span class=\\\"token operator\\\">=</span> resp<span class=\\\"token punctuation\\\">.</span>Body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">|></span> parseData code\\r\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> Stock <span class=\\\"token operator\\\">=</span> stock<span class=\\\"token punctuation\\\">;</span> Data <span class=\\\"token operator\\\">=</span> stockData <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这里的逻辑很简单，就是拿到传入一只股票的基本信息，根据股票的 code 信息拼出完整 url，再通过一个异步请求去获取数据。这里的异步请求本身可能因为各种原因失败，所以这里的 Data 是一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Option</code>\"\n    }\n  }), \" 类型的结果。\"), \"\\n\", React.createElement(_components.p, null, \"我这里取的是一个 jsonp 的请求，不能直接 deserialize 成一个对象，所以用了一个额外的 parseData 方法来处理数据\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"fsharp\\\"><pre class=\\\"language-fsharp\\\"><code class=\\\"language-fsharp\\\"><span class=\\\"token keyword\\\">let</span> parseData code <span class=\\\"token punctuation\\\">(</span>text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=</span>\\r\\n    <span class=\\\"token keyword\\\">try</span>\\r\\n        <span class=\\\"token keyword\\\">let</span> valuePart <span class=\\\"token operator\\\">=</span> text<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\":\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\r\\n        <span class=\\\"token keyword\\\">let</span> unit <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">match</span> code <span class=\\\"token keyword\\\">with</span>\\r\\n                    <span class=\\\"token operator\\\">|</span> HK _ <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">1000.0</span>\\r\\n                    <span class=\\\"token operator\\\">|</span> _ <span class=\\\"token operator\\\">-></span> <span class=\\\"token number\\\">100.0</span>\\r\\n        valuePart<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Substring</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> valuePart<span class=\\\"token punctuation\\\">.</span>Length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\",\\\"</span><span class=\\\"token punctuation\\\">)</span>\\r\\n        <span class=\\\"token operator\\\">|></span> Seq<span class=\\\"token punctuation\\\">.</span>map <span class=\\\"token punctuation\\\">(</span>float <span class=\\\"token operator\\\">>></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> x <span class=\\\"token operator\\\">-></span> x <span class=\\\"token operator\\\">/</span> unit<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\r\\n        <span class=\\\"token operator\\\">|></span> Seq<span class=\\\"token punctuation\\\">.</span>toArray\\r\\n        <span class=\\\"token operator\\\">|></span> <span class=\\\"token keyword\\\">fun</span> s <span class=\\\"token operator\\\">-></span>\\r\\n            <span class=\\\"token computation-expression keyword\\\">Some</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n                Price <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\r\\n                Open <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span>\\r\\n                High <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span>\\r\\n                Low <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\r\\n                UpDown <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span>\\r\\n                UpDownRate <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">]</span>\\r\\n                ExchangeRatio <span class=\\\"token operator\\\">=</span> s<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">]</span>\\r\\n            <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token keyword\\\">with</span>\\r\\n        <span class=\\\"token operator\\\">|</span> _ <span class=\\\"token operator\\\">-></span> None</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这里 parse 本身是一个极容易发生错误的过程，返回结果不对，或者返回结果不规范都有可能导致失败，由于我不关心错误原因，所以只要错误返回 None 就可以了，try 里面只关心正常的逻辑，这样可以让代码更好读一点。\"), \"\\n\", React.createElement(_components.p, null, \"这里面有两个奇怪的符号 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">|></code>\"\n    }\n  }), \"、 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">>></code>\"\n    }\n  }), \"，它们本质上都是函数，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">|></code>\"\n    }\n  }), \" 的定义是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">( |> ): 'T1 -> ('T1 -> 'U) -> 'U</code>\"\n    }\n  }), \"，即将左侧的参数 apply 到右侧的函数中，返回其结果，类似于一个管道，将数据流处理通过一个个函数串联起来，基本上是 fsharp 中最常见的符号了。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">>></code>\"\n    }\n  }), \" 的定义是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">( >> ) : ('T1 -> 'T2) -> ('T2 -> 'T3) -> 'T1 -> 'T3</code>\"\n    }\n  }), \"，即 compose 函数，将两个函数组装成一个函数。\"), \"\\n\", React.createElement(_components.p, null, \"还有一个比较 tricky 的事实是，fsharp 去处理这样的中缀符号的结合性的时候，是通过符号的形状来决定的，而不是像 Haskell 那样去显式的声明其结合性和优先级。\"), \"\\n\", React.createElement(_components.p, null, \"有了这些方法之后，主要功能就基本上完成了。最后来更改 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">main</code>\"\n    }\n  }), \" 函数。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"fsharp\\\"><pre class=\\\"language-fsharp\\\"><code class=\\\"language-fsharp\\\"><span class=\\\"token annotation\\\"><span class=\\\"token punctuation\\\">[&lt;</span><span class=\\\"token class-name\\\">EntryPoint</span><span class=\\\"token punctuation\\\">>]</span></span>\\r\\n<span class=\\\"token keyword\\\">let</span> main argv <span class=\\\"token operator\\\">=</span>\\r\\n    <span class=\\\"token keyword\\\">let</span> stocks <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\r\\n        <span class=\\\"token punctuation\\\">{</span>\\r\\n            Name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"MSFT\\\"</span><span class=\\\"token punctuation\\\">;</span>\\r\\n            Code <span class=\\\"token operator\\\">=</span> NSDQ <span class=\\\"token punctuation\\\">(</span>Code <span class=\\\"token string\\\">\\\"MSFT\\\"</span><span class=\\\"token punctuation\\\">)</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token punctuation\\\">]</span>\\r\\n\\r\\n    stocks\\r\\n    <span class=\\\"token operator\\\">|></span> Seq<span class=\\\"token punctuation\\\">.</span>map getStockData\\r\\n    <span class=\\\"token operator\\\">|></span> Async<span class=\\\"token punctuation\\\">.</span>Parallel\\r\\n    <span class=\\\"token operator\\\">|></span> Async<span class=\\\"token punctuation\\\">.</span>RunSynchronously\\r\\n    <span class=\\\"token operator\\\">|></span> Seq<span class=\\\"token punctuation\\\">.</span>iter\\r\\n        <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">fun</span> result <span class=\\\"token operator\\\">-></span>\\r\\n            <span class=\\\"token keyword\\\">match</span> result <span class=\\\"token keyword\\\">with</span>\\r\\n            <span class=\\\"token operator\\\">|</span> result <span class=\\\"token keyword\\\">when</span> result<span class=\\\"token punctuation\\\">.</span>Data <span class=\\\"token operator\\\">=</span> None <span class=\\\"token operator\\\">-></span> printfn <span class=\\\"token string\\\">\\\"|%-20s|%10s|%10s|%10s|%10s|%10s|%10s|\\\"</span> result<span class=\\\"token punctuation\\\">.</span>Stock<span class=\\\"token punctuation\\\">.</span>Name <span class=\\\"token string\\\">\\\"_\\\"</span> <span class=\\\"token string\\\">\\\"_\\\"</span> <span class=\\\"token string\\\">\\\"_\\\"</span> <span class=\\\"token string\\\">\\\"_\\\"</span> <span class=\\\"token string\\\">\\\"_\\\"</span> <span class=\\\"token string\\\">\\\"_\\\"</span>\\r\\n            <span class=\\\"token operator\\\">|</span> <span class=\\\"token punctuation\\\">{</span> StockResult<span class=\\\"token punctuation\\\">.</span>Stock <span class=\\\"token operator\\\">=</span> stock<span class=\\\"token punctuation\\\">;</span> StockResult<span class=\\\"token punctuation\\\">.</span>Data <span class=\\\"token operator\\\">=</span> Some data <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">-></span>\\r\\n                printfn <span class=\\\"token string\\\">\\\"|%-20s|%10.2f|%10.2f|%10.2f|%10.2f|%10.2f|%10.2f%%|\\\"</span> stock<span class=\\\"token punctuation\\\">.</span>Name data<span class=\\\"token punctuation\\\">.</span>Price data<span class=\\\"token punctuation\\\">.</span>Open data<span class=\\\"token punctuation\\\">.</span>Low data<span class=\\\"token punctuation\\\">.</span>High data<span class=\\\"token punctuation\\\">.</span>UpDown data<span class=\\\"token punctuation\\\">.</span>UpDownRate\\r\\n            <span class=\\\"token operator\\\">|</span> _ <span class=\\\"token operator\\\">-></span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\r\\n        <span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token number\\\">0</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这里有使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">printfn</code>\"\n    }\n  }), \" 将最后拿到的结果打印成表格呈现到终端。\"), \"\\n\", React.createElement(_components.h3, null, \"扩展应用\"), \"\\n\", React.createElement(_components.p, null, \"为了让代码更灵活，这里把 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stocks</code>\"\n    }\n  }), \" 放到一个外部 json 文件中，通过命令行参数进行捕获。这里我用到的是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FSharp.Json</code>\"\n    }\n  }), \" 这个库。\"), \"\\n\", React.createElement(_components.p, null, \"首先需要给最初定义的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StockCode</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Stock</code>\"\n    }\n  }), \" 类型加一些辅助的 attribute。这里涉及到一个 union type 的映射问题，当然，这里的代码是非常直白的。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"fsharp\\\"><pre class=\\\"language-fsharp\\\"><code class=\\\"language-fsharp\\\"><span class=\\\"token keyword\\\">open</span> FSharp<span class=\\\"token punctuation\\\">.</span>Json\\r\\n\\r\\n<span class=\\\"token annotation\\\"><span class=\\\"token punctuation\\\">[&lt;</span><span class=\\\"token class-name\\\">JsonUnion</span><span class=\\\"token annotation-content\\\"><span class=\\\"token punctuation\\\">(</span>Mode<span class=\\\"token operator\\\">=</span>UnionMode<span class=\\\"token punctuation\\\">.</span>CaseKeyAsFieldValue<span class=\\\"token punctuation\\\">,</span> CaseKeyField<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"type\\\"</span><span class=\\\"token punctuation\\\">,</span> CaseValueField<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"code\\\"</span><span class=\\\"token punctuation\\\">)</span></span><span class=\\\"token punctuation\\\">>]</span></span>\\r\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">StockCode</span> <span class=\\\"token operator\\\">=</span>\\r\\n    <span class=\\\"token operator\\\">|</span> SH <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">Code</span>\\r\\n    <span class=\\\"token operator\\\">|</span> SZ <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">Code</span>\\r\\n    <span class=\\\"token operator\\\">|</span> HK <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">Code</span>\\r\\n    <span class=\\\"token operator\\\">|</span> NSDQ <span class=\\\"token keyword\\\">of</span> <span class=\\\"token class-name\\\">Code</span>\\r\\n\\r\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">Stock</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n    <span class=\\\"token annotation\\\"><span class=\\\"token punctuation\\\">[&lt;</span><span class=\\\"token class-name\\\">JsonField</span><span class=\\\"token annotation-content\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"name\\\"</span><span class=\\\"token punctuation\\\">)</span></span><span class=\\\"token punctuation\\\">>]</span></span>\\r\\n    Name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">string</span>\\r\\n    <span class=\\\"token annotation\\\"><span class=\\\"token punctuation\\\">[&lt;</span><span class=\\\"token class-name\\\">JsonField</span><span class=\\\"token annotation-content\\\"><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"code\\\"</span><span class=\\\"token punctuation\\\">)</span></span><span class=\\\"token punctuation\\\">>]</span></span>\\r\\n    Code<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">StockCode</span>\\r\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"然后是更改我们的 main 函数。通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">argv</code>\"\n    }\n  }), \" 传入 filename，再通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">File</code>\"\n    }\n  }), \" 把内容读取到程序中，最后通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">FSharp.Json</code>\"\n    }\n  }), \" deserialize 成我们需要的结构，其他统统保持不变。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"fsharp\\\"><pre class=\\\"language-fsharp\\\"><code class=\\\"language-fsharp\\\"><span class=\\\"token annotation\\\"><span class=\\\"token punctuation\\\">[&lt;</span><span class=\\\"token class-name\\\">EntryPoint</span><span class=\\\"token punctuation\\\">>]</span></span>\\r\\n<span class=\\\"token keyword\\\">let</span> main argv <span class=\\\"token operator\\\">=</span>\\r\\n    <span class=\\\"token keyword\\\">let</span> filename <span class=\\\"token operator\\\">=</span> argv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span>\\r\\n    <span class=\\\"token keyword\\\">let</span> content <span class=\\\"token operator\\\">=</span> File<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ReadAllText</span><span class=\\\"token punctuation\\\">(</span>filename<span class=\\\"token punctuation\\\">)</span>\\r\\n    <span class=\\\"token keyword\\\">let</span> stocks <span class=\\\"token operator\\\">=</span> Json<span class=\\\"token punctuation\\\">.</span>deserialize<span class=\\\"token operator\\\">&lt;</span>Stock<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span>content<span class=\\\"token punctuation\\\">)</span>\\r\\n\\r\\n    <span class=\\\"token comment\\\">// ...</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"下面是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stocks.json</code>\"\n    }\n  }), \" 文件的一个示例。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">[</span>\\r\\n    <span class=\\\"token punctuation\\\">{</span>\\r\\n        <span class=\\\"token property\\\">\\\"name\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"MSFT\\\"</span><span class=\\\"token punctuation\\\">,</span>\\r\\n        <span class=\\\"token property\\\">\\\"code\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\r\\n            <span class=\\\"token property\\\">\\\"type\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"NSDQ\\\"</span><span class=\\\"token punctuation\\\">,</span>\\r\\n            <span class=\\\"token property\\\">\\\"code\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"MSFT\\\"</span>\\r\\n        <span class=\\\"token punctuation\\\">}</span>\\r\\n    <span class=\\\"token punctuation\\\">}</span>\\r\\n<span class=\\\"token punctuation\\\">]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"以上，就是整个应用的主要实现了，当然为了节省篇幅，中间省去了一些细枝末节。\"), \"\\n\", React.createElement(_components.p, null, \"完整的代码可以去访问我的 \", React.createElement(_components.a, {\n    href: \"https://github.com/nodew/TStock\"\n  }, \"Github\"), \" 查看。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"D:/projects/blog/posts/002-crawling-stock-data-in-fsharp/index.mdx\";\nimport _kebabCase from \"lodash/kebabCase\";\nimport * as React from \"react\";\nimport {Link} from \"gatsby\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport Layout from \"../components/Layout\";\nimport {Meta} from \"../components/Meta\";\nimport {TagIcon} from \"../components/TagIcon\";\ndayjs.extend(localizedFormat);\nconst PostTemplate = _ref => {\n  var _mdx$frontmatter;\n  let {data: {mdx}, children} = _ref;\n  if (mdx === null) {\n    return null;\n  }\n  return React.createElement(Layout, null, React.createElement(\"div\", {\n    className: \"max-w-5xl mx-auto\"\n  }, React.createElement(Meta, {\n    title: mdx.frontmatter.title || \"\",\n    description: mdx.frontmatter.excerpt || \"\",\n    type: \"article\",\n    extras: [{\n      name: \"keywords\",\n      content: mdx.frontmatter.keywords.join(\",\")\n    }]\n  }), React.createElement(\"div\", {\n    className: \"prose xl:prose-xl dark:prose-dark dark:xl:prose-dark-xl max-w-none\"\n  }, React.createElement(\"h1\", {\n    className: \"mb-0 xl:mb-2\"\n  }, (_mdx$frontmatter = mdx.frontmatter) === null || _mdx$frontmatter === void 0 ? void 0 : _mdx$frontmatter.title), React.createElement(\"ul\", {\n    className: \"list-none flex flex-wrap p-0 xl:p-0 my-0 xl:my-0\"\n  }, mdx.frontmatter.tags.map(tag => React.createElement(\"li\", {\n    key: tag,\n    className: \"flex-none ml-0 mr-4\"\n  }, React.createElement(Link, {\n    to: \"/tags/\" + _kebabCase(tag || \"\")\n  }, React.createElement(\"div\", {\n    className: \"flex flex-row items-center\"\n  }, React.createElement(TagIcon, null), React.createElement(\"span\", {\n    className: \"ml-1\"\n  }, tag)))))), React.createElement(\"div\", {\n    className: \"text-gray-400 dark:text-gray-700 italic mb-12\"\n  }, dayjs(mdx.frontmatter.date).format(\"LL\")), children)));\n};\nconst pageQuery = \"1935398499\";\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h3","ul","li","a","span","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","dayjs","localizedFormat","PostTemplate","_ref","_mdx$frontmatter","data","mdx","children","Layout","className","Meta","title","frontmatter","description","excerpt","type","extras","name","content","keywords","join","tags","map","tag","key","Link","to","_kebabCase","TagIcon","date","format","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}