{"componentChunkName":"component---src-templates-post-template-tsx-content-file-path-d-projects-blog-posts-001-lazy-list-with-generator-and-iterator-index-mdx","path":"/posts/lazy-list-with-generator-and-iterator/","result":{"data":{"mdx":{"id":"407e9a3f-3ecd-5ca2-a44b-edd671f1029d","frontmatter":{"date":"2018-08-25T00:00:00.000Z","excerpt":"在编程深入到一定领域的时候，惰性求值 (Lazy evaluation) 是绕不开的一部分。在现实中，有各种需求需要我们应对，为了防止可能的溢出情况，我们往往要凭借经验预先去定义一个上界或者下届，在绝大多数情况下，我们的操作是预先开辟大块内存以备不时之需，形成有意而为之的资源浪费。这种时候，引入惰性列表，或者惰性求值策略，可以在特定情况下帮我们节省资源开销，简化我们的复杂代码。本文主要讲述如何通过 ES6 的新特性 - Generator 和 Iterator，实现惰性列表功能。","keywords":["Lazy List","Generator","Iterator"],"slug":"lazy-list-with-generator-and-iterator","tags":["JavaScript","Lazy List","Generator","Iterator"],"title":"基于 Generator 和 Iterator 的惰性列表"}}},"pageContext":{"id":"407e9a3f-3ecd-5ca2-a44b-edd671f1029d","previousPostId":"8cdf24d7-89af-53bf-8a8b-2248a3d41314","nextPostId":"3a61f6ce-3e85-5092-993b-4496ee803cb5","frontmatter":{"title":"基于 Generator 和 Iterator 的惰性列表","date":"2018-08-25T00:00:00.000Z","slug":"lazy-list-with-generator-and-iterator","tags":["JavaScript","Lazy List","Generator","Iterator"],"keywords":["Lazy List","Generator","Iterator"],"excerpt":"在编程深入到一定领域的时候，惰性求值 (Lazy evaluation) 是绕不开的一部分。在现实中，有各种需求需要我们应对，为了防止可能的溢出情况，我们往往要凭借经验预先去定义一个上界或者下届，在绝大多数情况下，我们的操作是预先开辟大块内存以备不时之需，形成有意而为之的资源浪费。这种时候，引入惰性列表，或者惰性求值策略，可以在特定情况下帮我们节省资源开销，简化我们的复杂代码。本文主要讲述如何通过 ES6 的新特性 - Generator 和 Iterator，实现惰性列表功能。"}}},"staticQueryHashes":["4065915896","609479046"],"slicesMap":{}}