{"componentChunkName":"component---src-pages-posts-tsx","path":"/posts/","result":{"data":{"posts":{"nodes":[{"id":"8cdf24d7-89af-53bf-8a8b-2248a3d41314","frontmatter":{"slug":"crawling-stock-data-in-fsharp","title":"F# 初接触 - 获取实时股票数据","date":"2019-07-13T00:00:00.000Z","excerpt":"作为一根韭菜，很重要的当然是盯盘，这时候你是要在上班的时候掏出手机看还是打开网页看？作为一根合格的韭菜，答案当然是用命令行了！够低调，同时内容又高度定制化。而作为一根在 .NET 的生态里讨饭吃的韭菜，我首选的工具是 F#。 "}},{"id":"407e9a3f-3ecd-5ca2-a44b-edd671f1029d","frontmatter":{"slug":"lazy-list-with-generator-and-iterator","title":"基于 Generator 和 Iterator 的惰性列表","date":"2018-08-25T00:00:00.000Z","excerpt":"在编程深入到一定领域的时候，惰性求值 (Lazy evaluation) 是绕不开的一部分。在现实中，有各种需求需要我们应对，为了防止可能的溢出情况，我们往往要凭借经验预先去定义一个上界或者下届，在绝大多数情况下，我们的操作是预先开辟大块内存以备不时之需，形成有意而为之的资源浪费。这种时候，引入惰性列表，或者惰性求值策略，可以在特定情况下帮我们节省资源开销，简化我们的复杂代码。本文主要讲述如何通过 ES6 的新特性 - Generator 和 Iterator，实现惰性列表功能。"}},{"id":"3a61f6ce-3e85-5092-993b-4496ee803cb5","frontmatter":{"slug":"start-raspberrypi-without-screen","title":"树莓派折腾笔记 - 无显示器情况下连接使用树莓派","date":"2018-08-02T00:00:00.000Z","excerpt":"最近倒腾东西，翻出了几年前入手的一个 raspberry pi 2 代 b+ 的板子，上面都蒙了一层灰，开机后发现还能用。发挥环保主义的精神，废物再利用起来。本文主要讲笔者怎么在没有显示器、不借助网线直连的情况下通过 Wi-Fi 连接以及通过串口连接的方式来连接到树莓派的，记录下来一是方便日后折腾，二来是希望能帮助遇到过同样问题的朋友。"}}]}},"pageContext":{}},"staticQueryHashes":["4065915896","609479046"]}